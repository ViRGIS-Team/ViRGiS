### YamlMime:ManagedReference
items:
- uid: Project.RecordsetConverter
  commentId: T:Project.RecordsetConverter
  id: RecordsetConverter
  parent: Project
  children:
  - Project.RecordsetConverter.#ctor
  - Project.RecordsetConverter.CanConvert(System.Type)
  - Project.RecordsetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  - Project.RecordsetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  langs:
  - csharp
  - vb
  name: RecordsetConverter
  nameWithType: RecordsetConverter
  fullName: Project.RecordsetConverter
  type: Class
  source:
    remote:
      path: Assets/Scripts/Basic Types/Project.cs
      branch: doc
      repo: https://github.com/runette/ViRGIS.git
    id: RecordsetConverter
    path: ../Assets/Scripts/Basic Types/Project.cs
    startLine: 118
  assemblies:
  - Assembly-CSharp
  namespace: Project
  syntax:
    content: 'public class RecordsetConverter : JsonConverter'
    content.vb: >-
      Public Class RecordsetConverter
          Inherits JsonConverter
  inheritance:
  - System.Object
  - Newtonsoft.Json.JsonConverter
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Project.RecordsetConverter.#ctor
  commentId: M:Project.RecordsetConverter.#ctor
  id: '#ctor'
  parent: Project.RecordsetConverter
  langs:
  - csharp
  - vb
  name: RecordsetConverter()
  nameWithType: RecordsetConverter.RecordsetConverter()
  fullName: Project.RecordsetConverter.RecordsetConverter()
  type: Constructor
  source:
    remote:
      path: Assets/Scripts/Basic Types/Project.cs
      branch: doc
      repo: https://github.com/runette/ViRGIS.git
    id: .ctor
    path: ../Assets/Scripts/Basic Types/Project.cs
    startLine: 120
  assemblies:
  - Assembly-CSharp
  namespace: Project
  syntax:
    content: public RecordsetConverter()
    content.vb: Public Sub New
  overload: Project.RecordsetConverter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Project.RecordsetConverter.CanConvert(System.Type)
  commentId: M:Project.RecordsetConverter.CanConvert(System.Type)
  id: CanConvert(System.Type)
  parent: Project.RecordsetConverter
  langs:
  - csharp
  - vb
  name: CanConvert(Type)
  nameWithType: RecordsetConverter.CanConvert(Type)
  fullName: Project.RecordsetConverter.CanConvert(System.Type)
  type: Method
  source:
    remote:
      path: Assets/Scripts/Basic Types/Project.cs
      branch: doc
      repo: https://github.com/runette/ViRGIS.git
    id: CanConvert
    path: ../Assets/Scripts/Basic Types/Project.cs
    startLine: 125
  assemblies:
  - Assembly-CSharp
  namespace: Project
  syntax:
    content: public override bool CanConvert(Type objectType)
    parameters:
    - id: objectType
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Public Overrides Function CanConvert(objectType As Type) As Boolean
  overridden: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  overload: Project.RecordsetConverter.CanConvert*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Project.RecordsetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Project.RecordsetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  id: ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Project.RecordsetConverter
  langs:
  - csharp
  - vb
  name: ReadJson(JsonReader, Type, Object, JsonSerializer)
  nameWithType: RecordsetConverter.ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: Project.RecordsetConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: Assets/Scripts/Basic Types/Project.cs
      branch: doc
      repo: https://github.com/runette/ViRGIS.git
    id: ReadJson
    path: ../Assets/Scripts/Basic Types/Project.cs
    startLine: 130
  assemblies:
  - Assembly-CSharp
  namespace: Project
  syntax:
    content: public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
    - id: objectType
      type: System.Type
    - id: existingValue
      type: System.Object
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
    return:
      type: System.Object
    content.vb: Public Overrides Function ReadJson(reader As JsonReader, objectType As Type, existingValue As Object, serializer As JsonSerializer) As Object
  overridden: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  overload: Project.RecordsetConverter.ReadJson*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Project.RecordsetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Project.RecordsetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  id: WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Project.RecordsetConverter
  langs:
  - csharp
  - vb
  name: WriteJson(JsonWriter, Object, JsonSerializer)
  nameWithType: RecordsetConverter.WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: Project.RecordsetConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: Assets/Scripts/Basic Types/Project.cs
      branch: doc
      repo: https://github.com/runette/ViRGIS.git
    id: WriteJson
    path: ../Assets/Scripts/Basic Types/Project.cs
    startLine: 159
  assemblies:
  - Assembly-CSharp
  namespace: Project
  syntax:
    content: public override void WriteJson(JsonWriter writer, object vector, JsonSerializer serializer)
    parameters:
    - id: writer
      type: Newtonsoft.Json.JsonWriter
    - id: vector
      type: System.Object
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
    content.vb: Public Overrides Sub WriteJson(writer As JsonWriter, vector As Object, serializer As JsonSerializer)
  overridden: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  overload: Project.RecordsetConverter.WriteJson*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Project
  commentId: N:Project
  name: Project
  nameWithType: Project
  fullName: Project
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Newtonsoft.Json.JsonConverter
  commentId: T:Newtonsoft.Json.JsonConverter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonConverter
  nameWithType: JsonConverter
  fullName: Newtonsoft.Json.JsonConverter
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: true
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: Project.RecordsetConverter.#ctor*
  commentId: Overload:Project.RecordsetConverter.#ctor
  name: RecordsetConverter
  nameWithType: RecordsetConverter.RecordsetConverter
  fullName: Project.RecordsetConverter.RecordsetConverter
- uid: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  commentId: M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanConvert(Type)
  nameWithType: JsonConverter.CanConvert(Type)
  fullName: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonConverter.CanConvert
    fullName: Newtonsoft.Json.JsonConverter.CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonConverter.CanConvert
    fullName: Newtonsoft.Json.JsonConverter.CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Project.RecordsetConverter.CanConvert*
  commentId: Overload:Project.RecordsetConverter.CanConvert
  name: CanConvert
  nameWithType: RecordsetConverter.CanConvert
  fullName: Project.RecordsetConverter.CanConvert
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: ReadJson(JsonReader, Type, Object, JsonSerializer)
  nameWithType: JsonConverter.ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: JsonConverter.ReadJson
    fullName: Newtonsoft.Json.JsonConverter.ReadJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: JsonConverter.ReadJson
    fullName: Newtonsoft.Json.JsonConverter.ReadJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Project.RecordsetConverter.ReadJson*
  commentId: Overload:Project.RecordsetConverter.ReadJson
  name: ReadJson
  nameWithType: RecordsetConverter.ReadJson
  fullName: Project.RecordsetConverter.ReadJson
- uid: Newtonsoft.Json.JsonReader
  commentId: T:Newtonsoft.Json.JsonReader
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonReader
  nameWithType: JsonReader
  fullName: Newtonsoft.Json.JsonReader
- uid: Newtonsoft.Json.JsonSerializer
  commentId: T:Newtonsoft.Json.JsonSerializer
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: Newtonsoft.Json.JsonSerializer
- uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: WriteJson(JsonWriter, Object, JsonSerializer)
  nameWithType: JsonConverter.WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: JsonConverter.WriteJson
    fullName: Newtonsoft.Json.JsonConverter.WriteJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: JsonConverter.WriteJson
    fullName: Newtonsoft.Json.JsonConverter.WriteJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Project.RecordsetConverter.WriteJson*
  commentId: Overload:Project.RecordsetConverter.WriteJson
  name: WriteJson
  nameWithType: RecordsetConverter.WriteJson
  fullName: Project.RecordsetConverter.WriteJson
- uid: Newtonsoft.Json.JsonWriter
  commentId: T:Newtonsoft.Json.JsonWriter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonWriter
  nameWithType: JsonWriter
  fullName: Newtonsoft.Json.JsonWriter
