### YamlMime:ManagedReference
items:
- uid: GeoJSON.Net.GeoJSONObject
  commentId: T:GeoJSON.Net.GeoJSONObject
  id: GeoJSONObject
  parent: GeoJSON.Net
  children:
  - GeoJSON.Net.GeoJSONObject.BoundingBoxes
  - GeoJSON.Net.GeoJSONObject.CRS
  - GeoJSON.Net.GeoJSONObject.Equals(GeoJSON.Net.GeoJSONObject)
  - GeoJSON.Net.GeoJSONObject.Equals(GeoJSON.Net.GeoJSONObject,GeoJSON.Net.GeoJSONObject)
  - GeoJSON.Net.GeoJSONObject.Equals(System.Object)
  - GeoJSON.Net.GeoJSONObject.GetHashCode
  - GeoJSON.Net.GeoJSONObject.GetHashCode(GeoJSON.Net.GeoJSONObject)
  - GeoJSON.Net.GeoJSONObject.op_Equality(GeoJSON.Net.GeoJSONObject,GeoJSON.Net.GeoJSONObject)
  - GeoJSON.Net.GeoJSONObject.op_Inequality(GeoJSON.Net.GeoJSONObject,GeoJSON.Net.GeoJSONObject)
  - GeoJSON.Net.GeoJSONObject.Type
  langs:
  - csharp
  - vb
  name: GeoJSONObject
  nameWithType: GeoJSONObject
  fullName: GeoJSON.Net.GeoJSONObject
  type: Class
  source:
    remote:
      path: Assets/GeoJSON.Net/GeoJSONObject.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: GeoJSONObject
    path: ../Assets/GeoJSON.Net/GeoJSONObject.cs
    startLine: 16
  assemblies:
  - Assembly-CSharp
  namespace: GeoJSON.Net
  summary: "\nBase class for all IGeometryObject implementing types\n"
  example: []
  syntax:
    content: >-
      [JsonObject(MemberSerialization.OptIn)]

      public abstract class GeoJSONObject : IGeoJSONObject, IEqualityComparer<GeoJSONObject>, IEquatable<GeoJSONObject>
    content.vb: >-
      <JsonObject(MemberSerialization.OptIn)>

      Public MustInherit Class GeoJSONObject
          Implements IGeoJSONObject, IEqualityComparer(Of GeoJSONObject), IEquatable(Of GeoJSONObject)
  inheritance:
  - System.Object
  derivedClasses:
  - GeoJSON.Net.Feature.Feature`2
  - GeoJSON.Net.Feature.FeatureCollection
  - GeoJSON.Net.Geometry.GeometryCollection
  - GeoJSON.Net.Geometry.LineString
  - GeoJSON.Net.Geometry.MultiLineString
  - GeoJSON.Net.Geometry.MultiPoint
  - GeoJSON.Net.Geometry.MultiPolygon
  - GeoJSON.Net.Geometry.Point
  - GeoJSON.Net.Geometry.Polygon
  implements:
  - GeoJSON.Net.IGeoJSONObject
  attributes:
  - type: Newtonsoft.Json.JsonObjectAttribute
    ctor: Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)
    arguments:
    - type: Newtonsoft.Json.MemberSerialization
      value: 1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: GeoJSON.Net.GeoJSONObject.BoundingBoxes
  commentId: P:GeoJSON.Net.GeoJSONObject.BoundingBoxes
  id: BoundingBoxes
  parent: GeoJSON.Net.GeoJSONObject
  langs:
  - csharp
  - vb
  name: BoundingBoxes
  nameWithType: GeoJSONObject.BoundingBoxes
  fullName: GeoJSON.Net.GeoJSONObject.BoundingBoxes
  type: Property
  source:
    remote:
      path: Assets/GeoJSON.Net/GeoJSONObject.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: BoundingBoxes
    path: ../Assets/GeoJSON.Net/GeoJSONObject.cs
    startLine: 33
  assemblies:
  - Assembly-CSharp
  namespace: GeoJSON.Net
  summary: "\nGets or sets the (optional)\n<see cref=\"!:https://tools.ietf.org/html/rfc7946#section-5\">Bounding Boxes</see>.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "bbox", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]

      public double[] BoundingBoxes { get; set; }
    parameters: []
    return:
      type: System.Double[]
      description: "\nThe value of <xref href=\"GeoJSON.Net.GeoJSONObject.BoundingBoxes\" data-throw-if-not-resolved=\"false\"></xref> must be a 2*n array where n is the number of dimensions represented in\nthe\ncontained geometries, with the lowest values for all axes followed by the highest values.\nThe axes order of a bbox follows the axes order of geometries.\nIn addition, the coordinate reference system for the bbox is assumed to match the coordinate reference\nsystem of the GeoJSON object of which it is a member.\n"
    content.vb: >-
      <JsonProperty(PropertyName:="bbox", Required:=Required.Default, NullValueHandling:=NullValueHandling.Ignore)>

      Public Property BoundingBoxes As Double()
  overload: GeoJSON.Net.GeoJSONObject.BoundingBoxes*
  implements:
  - GeoJSON.Net.IGeoJSONObject.BoundingBoxes
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: bbox
    - name: Required
      type: Newtonsoft.Json.Required
      value: 0
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: GeoJSON.Net.GeoJSONObject.CRS
  commentId: P:GeoJSON.Net.GeoJSONObject.CRS
  id: CRS
  parent: GeoJSON.Net.GeoJSONObject
  langs:
  - csharp
  - vb
  name: CRS
  nameWithType: GeoJSONObject.CRS
  fullName: GeoJSON.Net.GeoJSONObject.CRS
  type: Property
  source:
    remote:
      path: Assets/GeoJSON.Net/GeoJSONObject.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: CRS
    path: ../Assets/GeoJSON.Net/GeoJSONObject.cs
    startLine: 46
  assemblies:
  - Assembly-CSharp
  namespace: GeoJSON.Net
  summary: "\nGets or sets the (optional)\n<see cref=\"!:https://tools.ietf.org/html/rfc7946#section-4\">\n    Coordinate Reference System\n    Object.\n</see>\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "crs", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore | DefaultValueHandling.Populate | DefaultValueHandling.IgnoreAndPopulate, NullValueHandling = NullValueHandling.Include)]

      [JsonConverter(typeof(CrsConverter))]

      public ICRSObject CRS { get; set; }
    parameters: []
    return:
      type: GeoJSON.Net.CoordinateReferenceSystem.ICRSObject
      description: "\nThe Coordinate Reference System Objects.\n"
    content.vb: >-
      <JsonProperty(PropertyName:="crs", Required:=Required.Default, DefaultValueHandling:=DefaultValueHandling.Ignore Or DefaultValueHandling.Populate Or DefaultValueHandling.IgnoreAndPopulate, NullValueHandling:=NullValueHandling.Include)>

      <JsonConverter(GetType(CrsConverter))>

      Public Property CRS As ICRSObject
  overload: GeoJSON.Net.GeoJSONObject.CRS*
  implements:
  - GeoJSON.Net.IGeoJSONObject.CRS
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: crs
    - name: Required
      type: Newtonsoft.Json.Required
      value: 0
    - name: DefaultValueHandling
      type: Newtonsoft.Json.DefaultValueHandling
      value: 3
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 0
  - type: Newtonsoft.Json.JsonConverterAttribute
    ctor: Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: GeoJSON.Net.Converters.CrsConverter
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: GeoJSON.Net.GeoJSONObject.Type
  commentId: P:GeoJSON.Net.GeoJSONObject.Type
  id: Type
  parent: GeoJSON.Net.GeoJSONObject
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: GeoJSONObject.Type
  fullName: GeoJSON.Net.GeoJSONObject.Type
  type: Property
  source:
    remote:
      path: Assets/GeoJSON.Net/GeoJSONObject.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: Type
    path: ../Assets/GeoJSON.Net/GeoJSONObject.cs
    startLine: 56
  assemblies:
  - Assembly-CSharp
  namespace: GeoJSON.Net
  summary: "\nThe (mandatory) type of the\n<see cref=\"!:https://tools.ietf.org/html/rfc7946#section-3\">GeoJSON Object</see>.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "type", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.Include)]

      [JsonConverter(typeof(StringEnumConverter))]

      public abstract GeoJSONObjectType Type { get; }
    parameters: []
    return:
      type: GeoJSON.Net.GeoJSONObjectType
    content.vb: >-
      <JsonProperty(PropertyName:="type", Required:=Required.Always, DefaultValueHandling:=DefaultValueHandling.Include)>

      <JsonConverter(GetType(StringEnumConverter))>

      Public MustOverride ReadOnly Property Type As GeoJSONObjectType
  overload: GeoJSON.Net.GeoJSONObject.Type*
  implements:
  - GeoJSON.Net.IGeoJSONObject.Type
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: type
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
    - name: DefaultValueHandling
      type: Newtonsoft.Json.DefaultValueHandling
      value: 0
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: GeoJSON.Net.GeoJSONObject.Equals(System.Object)
  commentId: M:GeoJSON.Net.GeoJSONObject.Equals(System.Object)
  id: Equals(System.Object)
  parent: GeoJSON.Net.GeoJSONObject
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: GeoJSONObject.Equals(Object)
  fullName: GeoJSON.Net.GeoJSONObject.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Assets/GeoJSON.Net/GeoJSONObject.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: Equals
    path: ../Assets/GeoJSON.Net/GeoJSONObject.cs
    startLine: 66
  assemblies:
  - Assembly-CSharp
  namespace: GeoJSON.Net
  summary: "\nDetermines whether the specified object is equal to the current object\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: GeoJSON.Net.GeoJSONObject.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: GeoJSON.Net.GeoJSONObject.Equals(GeoJSON.Net.GeoJSONObject)
  commentId: M:GeoJSON.Net.GeoJSONObject.Equals(GeoJSON.Net.GeoJSONObject)
  id: Equals(GeoJSON.Net.GeoJSONObject)
  parent: GeoJSON.Net.GeoJSONObject
  langs:
  - csharp
  - vb
  name: Equals(GeoJSONObject)
  nameWithType: GeoJSONObject.Equals(GeoJSONObject)
  fullName: GeoJSON.Net.GeoJSONObject.Equals(GeoJSON.Net.GeoJSONObject)
  type: Method
  source:
    remote:
      path: Assets/GeoJSON.Net/GeoJSONObject.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: Equals
    path: ../Assets/GeoJSON.Net/GeoJSONObject.cs
    startLine: 74
  assemblies:
  - Assembly-CSharp
  namespace: GeoJSON.Net
  summary: "\nDetermines whether the specified object is equal to the current object\n"
  example: []
  syntax:
    content: public bool Equals(GeoJSONObject other)
    parameters:
    - id: other
      type: GeoJSON.Net.GeoJSONObject
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As GeoJSONObject) As Boolean
  overload: GeoJSON.Net.GeoJSONObject.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeoJSON.Net.GeoJSONObject.Equals(GeoJSON.Net.GeoJSONObject,GeoJSON.Net.GeoJSONObject)
  commentId: M:GeoJSON.Net.GeoJSONObject.Equals(GeoJSON.Net.GeoJSONObject,GeoJSON.Net.GeoJSONObject)
  id: Equals(GeoJSON.Net.GeoJSONObject,GeoJSON.Net.GeoJSONObject)
  parent: GeoJSON.Net.GeoJSONObject
  langs:
  - csharp
  - vb
  name: Equals(GeoJSONObject, GeoJSONObject)
  nameWithType: GeoJSONObject.Equals(GeoJSONObject, GeoJSONObject)
  fullName: GeoJSON.Net.GeoJSONObject.Equals(GeoJSON.Net.GeoJSONObject, GeoJSON.Net.GeoJSONObject)
  type: Method
  source:
    remote:
      path: Assets/GeoJSON.Net/GeoJSONObject.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: Equals
    path: ../Assets/GeoJSON.Net/GeoJSONObject.cs
    startLine: 82
  assemblies:
  - Assembly-CSharp
  namespace: GeoJSON.Net
  summary: "\nDetermines whether the specified object instances are considered equal\n"
  example: []
  syntax:
    content: public bool Equals(GeoJSONObject left, GeoJSONObject right)
    parameters:
    - id: left
      type: GeoJSON.Net.GeoJSONObject
    - id: right
      type: GeoJSON.Net.GeoJSONObject
    return:
      type: System.Boolean
    content.vb: Public Function Equals(left As GeoJSONObject, right As GeoJSONObject) As Boolean
  overload: GeoJSON.Net.GeoJSONObject.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeoJSON.Net.GeoJSONObject.op_Equality(GeoJSON.Net.GeoJSONObject,GeoJSON.Net.GeoJSONObject)
  commentId: M:GeoJSON.Net.GeoJSONObject.op_Equality(GeoJSON.Net.GeoJSONObject,GeoJSON.Net.GeoJSONObject)
  id: op_Equality(GeoJSON.Net.GeoJSONObject,GeoJSON.Net.GeoJSONObject)
  parent: GeoJSON.Net.GeoJSONObject
  langs:
  - csharp
  - vb
  name: Equality(GeoJSONObject, GeoJSONObject)
  nameWithType: GeoJSONObject.Equality(GeoJSONObject, GeoJSONObject)
  fullName: GeoJSON.Net.GeoJSONObject.Equality(GeoJSON.Net.GeoJSONObject, GeoJSON.Net.GeoJSONObject)
  type: Operator
  source:
    remote:
      path: Assets/GeoJSON.Net/GeoJSONObject.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: op_Equality
    path: ../Assets/GeoJSON.Net/GeoJSONObject.cs
    startLine: 118
  assemblies:
  - Assembly-CSharp
  namespace: GeoJSON.Net
  summary: "\nDetermines whether the specified object instances are considered equal\n"
  example: []
  syntax:
    content: public static bool operator ==(GeoJSONObject left, GeoJSONObject right)
    parameters:
    - id: left
      type: GeoJSON.Net.GeoJSONObject
    - id: right
      type: GeoJSON.Net.GeoJSONObject
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As GeoJSONObject, right As GeoJSONObject) As Boolean
  overload: GeoJSON.Net.GeoJSONObject.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeoJSON.Net.GeoJSONObject.op_Inequality(GeoJSON.Net.GeoJSONObject,GeoJSON.Net.GeoJSONObject)
  commentId: M:GeoJSON.Net.GeoJSONObject.op_Inequality(GeoJSON.Net.GeoJSONObject,GeoJSON.Net.GeoJSONObject)
  id: op_Inequality(GeoJSON.Net.GeoJSONObject,GeoJSON.Net.GeoJSONObject)
  parent: GeoJSON.Net.GeoJSONObject
  langs:
  - csharp
  - vb
  name: Inequality(GeoJSONObject, GeoJSONObject)
  nameWithType: GeoJSONObject.Inequality(GeoJSONObject, GeoJSONObject)
  fullName: GeoJSON.Net.GeoJSONObject.Inequality(GeoJSON.Net.GeoJSONObject, GeoJSON.Net.GeoJSONObject)
  type: Operator
  source:
    remote:
      path: Assets/GeoJSON.Net/GeoJSONObject.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: op_Inequality
    path: ../Assets/GeoJSON.Net/GeoJSONObject.cs
    startLine: 134
  assemblies:
  - Assembly-CSharp
  namespace: GeoJSON.Net
  summary: "\nDetermines whether the specified object instances are not considered equal\n"
  example: []
  syntax:
    content: public static bool operator !=(GeoJSONObject left, GeoJSONObject right)
    parameters:
    - id: left
      type: GeoJSON.Net.GeoJSONObject
    - id: right
      type: GeoJSON.Net.GeoJSONObject
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(left As GeoJSONObject, right As GeoJSONObject) As Boolean
  overload: GeoJSON.Net.GeoJSONObject.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeoJSON.Net.GeoJSONObject.GetHashCode
  commentId: M:GeoJSON.Net.GeoJSONObject.GetHashCode
  id: GetHashCode
  parent: GeoJSON.Net.GeoJSONObject
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: GeoJSONObject.GetHashCode()
  fullName: GeoJSON.Net.GeoJSONObject.GetHashCode()
  type: Method
  source:
    remote:
      path: Assets/GeoJSON.Net/GeoJSONObject.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: GetHashCode
    path: ../Assets/GeoJSON.Net/GeoJSONObject.cs
    startLine: 142
  assemblies:
  - Assembly-CSharp
  namespace: GeoJSON.Net
  summary: "\nReturns the hash code for this instance\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: GeoJSON.Net.GeoJSONObject.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: GeoJSON.Net.GeoJSONObject.GetHashCode(GeoJSON.Net.GeoJSONObject)
  commentId: M:GeoJSON.Net.GeoJSONObject.GetHashCode(GeoJSON.Net.GeoJSONObject)
  id: GetHashCode(GeoJSON.Net.GeoJSONObject)
  parent: GeoJSON.Net.GeoJSONObject
  langs:
  - csharp
  - vb
  name: GetHashCode(GeoJSONObject)
  nameWithType: GeoJSONObject.GetHashCode(GeoJSONObject)
  fullName: GeoJSON.Net.GeoJSONObject.GetHashCode(GeoJSON.Net.GeoJSONObject)
  type: Method
  source:
    remote:
      path: Assets/GeoJSON.Net/GeoJSONObject.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: GetHashCode
    path: ../Assets/GeoJSON.Net/GeoJSONObject.cs
    startLine: 150
  assemblies:
  - Assembly-CSharp
  namespace: GeoJSON.Net
  summary: "\nReturns the hash code for the specified object\n"
  example: []
  syntax:
    content: public int GetHashCode(GeoJSONObject obj)
    parameters:
    - id: obj
      type: GeoJSON.Net.GeoJSONObject
    return:
      type: System.Int32
    content.vb: Public Function GetHashCode(obj As GeoJSONObject) As Integer
  overload: GeoJSON.Net.GeoJSONObject.GetHashCode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: GeoJSON.Net
  commentId: N:GeoJSON.Net
  name: GeoJSON.Net
  nameWithType: GeoJSON.Net
  fullName: GeoJSON.Net
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: GeoJSON.Net.IGeoJSONObject
  commentId: T:GeoJSON.Net.IGeoJSONObject
  parent: GeoJSON.Net
  name: IGeoJSONObject
  nameWithType: IGeoJSONObject
  fullName: GeoJSON.Net.IGeoJSONObject
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GeoJSON.Net.GeoJSONObject.BoundingBoxes
  commentId: P:GeoJSON.Net.GeoJSONObject.BoundingBoxes
  parent: GeoJSON.Net.GeoJSONObject
  name: BoundingBoxes
  nameWithType: GeoJSONObject.BoundingBoxes
  fullName: GeoJSON.Net.GeoJSONObject.BoundingBoxes
- uid: GeoJSON.Net.GeoJSONObject.BoundingBoxes*
  commentId: Overload:GeoJSON.Net.GeoJSONObject.BoundingBoxes
  name: BoundingBoxes
  nameWithType: GeoJSONObject.BoundingBoxes
  fullName: GeoJSON.Net.GeoJSONObject.BoundingBoxes
- uid: GeoJSON.Net.IGeoJSONObject.BoundingBoxes
  commentId: P:GeoJSON.Net.IGeoJSONObject.BoundingBoxes
  parent: GeoJSON.Net.IGeoJSONObject
  name: BoundingBoxes
  nameWithType: IGeoJSONObject.BoundingBoxes
  fullName: GeoJSON.Net.IGeoJSONObject.BoundingBoxes
- uid: System.Double[]
  isExternal: true
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: GeoJSON.Net.GeoJSONObject
  commentId: T:GeoJSON.Net.GeoJSONObject
  parent: GeoJSON.Net
  name: GeoJSONObject
  nameWithType: GeoJSONObject
  fullName: GeoJSON.Net.GeoJSONObject
- uid: GeoJSON.Net.GeoJSONObject.CRS*
  commentId: Overload:GeoJSON.Net.GeoJSONObject.CRS
  name: CRS
  nameWithType: GeoJSONObject.CRS
  fullName: GeoJSON.Net.GeoJSONObject.CRS
- uid: GeoJSON.Net.IGeoJSONObject.CRS
  commentId: P:GeoJSON.Net.IGeoJSONObject.CRS
  parent: GeoJSON.Net.IGeoJSONObject
  name: CRS
  nameWithType: IGeoJSONObject.CRS
  fullName: GeoJSON.Net.IGeoJSONObject.CRS
- uid: GeoJSON.Net.CoordinateReferenceSystem.ICRSObject
  commentId: T:GeoJSON.Net.CoordinateReferenceSystem.ICRSObject
  parent: GeoJSON.Net.CoordinateReferenceSystem
  name: ICRSObject
  nameWithType: ICRSObject
  fullName: GeoJSON.Net.CoordinateReferenceSystem.ICRSObject
- uid: GeoJSON.Net.CoordinateReferenceSystem
  commentId: N:GeoJSON.Net.CoordinateReferenceSystem
  name: GeoJSON.Net.CoordinateReferenceSystem
  nameWithType: GeoJSON.Net.CoordinateReferenceSystem
  fullName: GeoJSON.Net.CoordinateReferenceSystem
- uid: GeoJSON.Net.GeoJSONObject.Type*
  commentId: Overload:GeoJSON.Net.GeoJSONObject.Type
  name: Type
  nameWithType: GeoJSONObject.Type
  fullName: GeoJSON.Net.GeoJSONObject.Type
- uid: GeoJSON.Net.IGeoJSONObject.Type
  commentId: P:GeoJSON.Net.IGeoJSONObject.Type
  parent: GeoJSON.Net.IGeoJSONObject
  name: Type
  nameWithType: IGeoJSONObject.Type
  fullName: GeoJSON.Net.IGeoJSONObject.Type
- uid: GeoJSON.Net.GeoJSONObjectType
  commentId: T:GeoJSON.Net.GeoJSONObjectType
  parent: GeoJSON.Net
  name: GeoJSONObjectType
  nameWithType: GeoJSONObjectType
  fullName: GeoJSON.Net.GeoJSONObjectType
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GeoJSON.Net.GeoJSONObject.Equals*
  commentId: Overload:GeoJSON.Net.GeoJSONObject.Equals
  name: Equals
  nameWithType: GeoJSONObject.Equals
  fullName: GeoJSON.Net.GeoJSONObject.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: GeoJSON.Net.GeoJSONObject.op_Equality*
  commentId: Overload:GeoJSON.Net.GeoJSONObject.op_Equality
  name: Equality
  nameWithType: GeoJSONObject.Equality
  fullName: GeoJSON.Net.GeoJSONObject.Equality
- uid: GeoJSON.Net.GeoJSONObject.op_Inequality*
  commentId: Overload:GeoJSON.Net.GeoJSONObject.op_Inequality
  name: Inequality
  nameWithType: GeoJSONObject.Inequality
  fullName: GeoJSON.Net.GeoJSONObject.Inequality
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: GeoJSON.Net.GeoJSONObject.GetHashCode*
  commentId: Overload:GeoJSON.Net.GeoJSONObject.GetHashCode
  name: GetHashCode
  nameWithType: GeoJSONObject.GetHashCode
  fullName: GeoJSON.Net.GeoJSONObject.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
