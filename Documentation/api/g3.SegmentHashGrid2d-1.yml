### YamlMime:ManagedReference
items:
- uid: g3.SegmentHashGrid2d`1
  commentId: T:g3.SegmentHashGrid2d`1
  id: SegmentHashGrid2d`1
  parent: g3
  children:
  - g3.SegmentHashGrid2d`1.#ctor(System.Double,`0)
  - g3.SegmentHashGrid2d`1.FindNearestInRadius(g3.Vector2d,System.Double,System.Func{`0,System.Double},System.Func{`0,System.Boolean})
  - g3.SegmentHashGrid2d`1.FindNearestInSquaredRadius(g3.Vector2d,System.Double,System.Func{`0,System.Double},System.Func{`0,System.Boolean})
  - g3.SegmentHashGrid2d`1.InsertSegment(`0,g3.Vector2d,System.Double)
  - g3.SegmentHashGrid2d`1.InsertSegmentUnsafe(`0,g3.Vector2d,System.Double)
  - g3.SegmentHashGrid2d`1.RemoveSegment(`0,g3.Vector2d)
  - g3.SegmentHashGrid2d`1.RemoveSegmentUnsafe(`0,g3.Vector2d)
  - g3.SegmentHashGrid2d`1.UpdateSegment(`0,g3.Vector2d,g3.Vector2d,System.Double)
  - g3.SegmentHashGrid2d`1.UpdateSegmentUnsafe(`0,g3.Vector2d,g3.Vector2d,System.Double)
  langs:
  - csharp
  - vb
  name: SegmentHashGrid2d<T>
  nameWithType: SegmentHashGrid2d<T>
  fullName: g3.SegmentHashGrid2d<T>
  type: Class
  source:
    remote:
      path: Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: SegmentHashGrid2d
    path: ../Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
    startLine: 24
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nHash Grid for 2D segments. You provide the &apos;segment&apos; type. If you have an indexable\nset of segments this can just be int, or can be more complex segment data structure\n(but be careful w/ structs...)\n\nSegments are stored in the grid cell that contains the segment center. We keep track\nof the extent of the *longest* segment that has been added. The search radius for\ndistance queries is expanded by this extent. \n\nSo, distance queries **ARE NOT EFFICIENT** if you even one very long segment.\n[TODO] make a multi-level hash\n\nDoes not actually store 2D segments. So, to remove a segment\nyou must also know it&apos;s 2D center, so we can look up the cell coordinates.\nHence, to &apos;update&apos; a segment, you need to know both it&apos;s old and new 2D centers.\n"
  example: []
  syntax:
    content: public class SegmentHashGrid2d<T>
    typeParameters:
    - id: T
    content.vb: Public Class SegmentHashGrid2d(Of T)
  inheritance:
  - System.Object
  nameWithType.vb: SegmentHashGrid2d(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: g3.SegmentHashGrid2d(Of T)
  name.vb: SegmentHashGrid2d(Of T)
- uid: g3.SegmentHashGrid2d`1.#ctor(System.Double,`0)
  commentId: M:g3.SegmentHashGrid2d`1.#ctor(System.Double,`0)
  id: '#ctor(System.Double,`0)'
  parent: g3.SegmentHashGrid2d`1
  langs:
  - csharp
  - vb
  name: SegmentHashGrid2d(Double, T)
  nameWithType: SegmentHashGrid2d<T>.SegmentHashGrid2d(Double, T)
  fullName: g3.SegmentHashGrid2d<T>.SegmentHashGrid2d(System.Double, T)
  type: Constructor
  source:
    remote:
      path: Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: .ctor
    path: ../Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
    startLine: 36
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\n&quot;invalid&quot; value will be returned by queries if no valid result is found (eg bounded-distance query)\n"
  example: []
  syntax:
    content: public SegmentHashGrid2d(double cellSize, T invalidValue)
    parameters:
    - id: cellSize
      type: System.Double
    - id: invalidValue
      type: '{T}'
    content.vb: Public Sub New(cellSize As Double, invalidValue As T)
  overload: g3.SegmentHashGrid2d`1.#ctor*
  nameWithType.vb: SegmentHashGrid2d(Of T).SegmentHashGrid2d(Double, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.SegmentHashGrid2d(Of T).SegmentHashGrid2d(System.Double, T)
- uid: g3.SegmentHashGrid2d`1.InsertSegment(`0,g3.Vector2d,System.Double)
  commentId: M:g3.SegmentHashGrid2d`1.InsertSegment(`0,g3.Vector2d,System.Double)
  id: InsertSegment(`0,g3.Vector2d,System.Double)
  parent: g3.SegmentHashGrid2d`1
  langs:
  - csharp
  - vb
  name: InsertSegment(T, Vector2d, Double)
  nameWithType: SegmentHashGrid2d<T>.InsertSegment(T, Vector2d, Double)
  fullName: g3.SegmentHashGrid2d<T>.InsertSegment(T, g3.Vector2d, System.Double)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: InsertSegment
    path: ../Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
    startLine: 49
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nInsert segment at position. This function is thread-safe, uses a SpinLock internally\n"
  example: []
  syntax:
    content: public void InsertSegment(T value, Vector2d center, double extent)
    parameters:
    - id: value
      type: '{T}'
    - id: center
      type: g3.Vector2d
    - id: extent
      type: System.Double
    content.vb: Public Sub InsertSegment(value As T, center As Vector2d, extent As Double)
  overload: g3.SegmentHashGrid2d`1.InsertSegment*
  nameWithType.vb: SegmentHashGrid2d(Of T).InsertSegment(T, Vector2d, Double)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.SegmentHashGrid2d(Of T).InsertSegment(T, g3.Vector2d, System.Double)
- uid: g3.SegmentHashGrid2d`1.InsertSegmentUnsafe(`0,g3.Vector2d,System.Double)
  commentId: M:g3.SegmentHashGrid2d`1.InsertSegmentUnsafe(`0,g3.Vector2d,System.Double)
  id: InsertSegmentUnsafe(`0,g3.Vector2d,System.Double)
  parent: g3.SegmentHashGrid2d`1
  langs:
  - csharp
  - vb
  name: InsertSegmentUnsafe(T, Vector2d, Double)
  nameWithType: SegmentHashGrid2d<T>.InsertSegmentUnsafe(T, Vector2d, Double)
  fullName: g3.SegmentHashGrid2d<T>.InsertSegmentUnsafe(T, g3.Vector2d, System.Double)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: InsertSegmentUnsafe
    path: ../Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
    startLine: 60
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nInsert segment without locking / thread-safety\n"
  example: []
  syntax:
    content: public void InsertSegmentUnsafe(T value, Vector2d center, double extent)
    parameters:
    - id: value
      type: '{T}'
    - id: center
      type: g3.Vector2d
    - id: extent
      type: System.Double
    content.vb: Public Sub InsertSegmentUnsafe(value As T, center As Vector2d, extent As Double)
  overload: g3.SegmentHashGrid2d`1.InsertSegmentUnsafe*
  nameWithType.vb: SegmentHashGrid2d(Of T).InsertSegmentUnsafe(T, Vector2d, Double)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.SegmentHashGrid2d(Of T).InsertSegmentUnsafe(T, g3.Vector2d, System.Double)
- uid: g3.SegmentHashGrid2d`1.RemoveSegment(`0,g3.Vector2d)
  commentId: M:g3.SegmentHashGrid2d`1.RemoveSegment(`0,g3.Vector2d)
  id: RemoveSegment(`0,g3.Vector2d)
  parent: g3.SegmentHashGrid2d`1
  langs:
  - csharp
  - vb
  name: RemoveSegment(T, Vector2d)
  nameWithType: SegmentHashGrid2d<T>.RemoveSegment(T, Vector2d)
  fullName: g3.SegmentHashGrid2d<T>.RemoveSegment(T, g3.Vector2d)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: RemoveSegment
    path: ../Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
    startLine: 72
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nRemove segment. This function is thread-safe, uses a SpinLock internally\n"
  example: []
  syntax:
    content: public bool RemoveSegment(T value, Vector2d center)
    parameters:
    - id: value
      type: '{T}'
    - id: center
      type: g3.Vector2d
    return:
      type: System.Boolean
    content.vb: Public Function RemoveSegment(value As T, center As Vector2d) As Boolean
  overload: g3.SegmentHashGrid2d`1.RemoveSegment*
  nameWithType.vb: SegmentHashGrid2d(Of T).RemoveSegment(T, Vector2d)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.SegmentHashGrid2d(Of T).RemoveSegment(T, g3.Vector2d)
- uid: g3.SegmentHashGrid2d`1.RemoveSegmentUnsafe(`0,g3.Vector2d)
  commentId: M:g3.SegmentHashGrid2d`1.RemoveSegmentUnsafe(`0,g3.Vector2d)
  id: RemoveSegmentUnsafe(`0,g3.Vector2d)
  parent: g3.SegmentHashGrid2d`1
  langs:
  - csharp
  - vb
  name: RemoveSegmentUnsafe(T, Vector2d)
  nameWithType: SegmentHashGrid2d<T>.RemoveSegmentUnsafe(T, Vector2d)
  fullName: g3.SegmentHashGrid2d<T>.RemoveSegmentUnsafe(T, g3.Vector2d)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: RemoveSegmentUnsafe
    path: ../Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
    startLine: 81
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nRemove segment without locking / thread-safety\n"
  example: []
  syntax:
    content: public bool RemoveSegmentUnsafe(T value, Vector2d center)
    parameters:
    - id: value
      type: '{T}'
    - id: center
      type: g3.Vector2d
    return:
      type: System.Boolean
    content.vb: Public Function RemoveSegmentUnsafe(value As T, center As Vector2d) As Boolean
  overload: g3.SegmentHashGrid2d`1.RemoveSegmentUnsafe*
  nameWithType.vb: SegmentHashGrid2d(Of T).RemoveSegmentUnsafe(T, Vector2d)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.SegmentHashGrid2d(Of T).RemoveSegmentUnsafe(T, g3.Vector2d)
- uid: g3.SegmentHashGrid2d`1.UpdateSegment(`0,g3.Vector2d,g3.Vector2d,System.Double)
  commentId: M:g3.SegmentHashGrid2d`1.UpdateSegment(`0,g3.Vector2d,g3.Vector2d,System.Double)
  id: UpdateSegment(`0,g3.Vector2d,g3.Vector2d,System.Double)
  parent: g3.SegmentHashGrid2d`1
  langs:
  - csharp
  - vb
  name: UpdateSegment(T, Vector2d, Vector2d, Double)
  nameWithType: SegmentHashGrid2d<T>.UpdateSegment(T, Vector2d, Vector2d, Double)
  fullName: g3.SegmentHashGrid2d<T>.UpdateSegment(T, g3.Vector2d, g3.Vector2d, System.Double)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: UpdateSegment
    path: ../Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
    startLine: 91
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nMove segment from old to new position. This function is thread-safe, uses a SpinLock internally\n"
  example: []
  syntax:
    content: public void UpdateSegment(T value, Vector2d old_center, Vector2d new_center, double new_extent)
    parameters:
    - id: value
      type: '{T}'
    - id: old_center
      type: g3.Vector2d
    - id: new_center
      type: g3.Vector2d
    - id: new_extent
      type: System.Double
    content.vb: Public Sub UpdateSegment(value As T, old_center As Vector2d, new_center As Vector2d, new_extent As Double)
  overload: g3.SegmentHashGrid2d`1.UpdateSegment*
  nameWithType.vb: SegmentHashGrid2d(Of T).UpdateSegment(T, Vector2d, Vector2d, Double)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.SegmentHashGrid2d(Of T).UpdateSegment(T, g3.Vector2d, g3.Vector2d, System.Double)
- uid: g3.SegmentHashGrid2d`1.UpdateSegmentUnsafe(`0,g3.Vector2d,g3.Vector2d,System.Double)
  commentId: M:g3.SegmentHashGrid2d`1.UpdateSegmentUnsafe(`0,g3.Vector2d,g3.Vector2d,System.Double)
  id: UpdateSegmentUnsafe(`0,g3.Vector2d,g3.Vector2d,System.Double)
  parent: g3.SegmentHashGrid2d`1
  langs:
  - csharp
  - vb
  name: UpdateSegmentUnsafe(T, Vector2d, Vector2d, Double)
  nameWithType: SegmentHashGrid2d<T>.UpdateSegmentUnsafe(T, Vector2d, Vector2d, Double)
  fullName: g3.SegmentHashGrid2d<T>.UpdateSegmentUnsafe(T, g3.Vector2d, g3.Vector2d, System.Double)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: UpdateSegmentUnsafe
    path: ../Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
    startLine: 109
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nMove segment from old to new position without locking / thread-safety\n"
  example: []
  syntax:
    content: public void UpdateSegmentUnsafe(T value, Vector2d old_center, Vector2d new_center, double new_extent)
    parameters:
    - id: value
      type: '{T}'
    - id: old_center
      type: g3.Vector2d
    - id: new_center
      type: g3.Vector2d
    - id: new_extent
      type: System.Double
    content.vb: Public Sub UpdateSegmentUnsafe(value As T, old_center As Vector2d, new_center As Vector2d, new_extent As Double)
  overload: g3.SegmentHashGrid2d`1.UpdateSegmentUnsafe*
  nameWithType.vb: SegmentHashGrid2d(Of T).UpdateSegmentUnsafe(T, Vector2d, Vector2d, Double)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.SegmentHashGrid2d(Of T).UpdateSegmentUnsafe(T, g3.Vector2d, g3.Vector2d, System.Double)
- uid: g3.SegmentHashGrid2d`1.FindNearestInRadius(g3.Vector2d,System.Double,System.Func{`0,System.Double},System.Func{`0,System.Boolean})
  commentId: M:g3.SegmentHashGrid2d`1.FindNearestInRadius(g3.Vector2d,System.Double,System.Func{`0,System.Double},System.Func{`0,System.Boolean})
  id: FindNearestInRadius(g3.Vector2d,System.Double,System.Func{`0,System.Double},System.Func{`0,System.Boolean})
  parent: g3.SegmentHashGrid2d`1
  langs:
  - csharp
  - vb
  name: FindNearestInRadius(Vector2d, Double, Func<T, Double>, Func<T, Boolean>)
  nameWithType: SegmentHashGrid2d<T>.FindNearestInRadius(Vector2d, Double, Func<T, Double>, Func<T, Boolean>)
  fullName: g3.SegmentHashGrid2d<T>.FindNearestInRadius(g3.Vector2d, System.Double, System.Func<T, System.Double>, System.Func<T, System.Boolean>)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: FindNearestInRadius
    path: ../Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
    startLine: 130
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nFind nearest segment in grid, within radius, without locking / thread-safety\nYou must provided distF which returns distance between query_pt and the segment argument\nYou can ignore specific segments via ignoreF lambda - return true to ignore \nReturn value is pair (nearest_index,min_dist) or (invalidValue,double.MaxValue)\n"
  example: []
  syntax:
    content: public KeyValuePair<T, double> FindNearestInRadius(Vector2d query_pt, double radius, Func<T, double> distF, Func<T, bool> ignoreF = null)
    parameters:
    - id: query_pt
      type: g3.Vector2d
    - id: radius
      type: System.Double
    - id: distF
      type: System.Func{{T},System.Double}
    - id: ignoreF
      type: System.Func{{T},System.Boolean}
    return:
      type: System.Collections.Generic.KeyValuePair{{T},System.Double}
    content.vb: Public Function FindNearestInRadius(query_pt As Vector2d, radius As Double, distF As Func(Of T, Double), ignoreF As Func(Of T, Boolean) = Nothing) As KeyValuePair(Of T, Double)
  overload: g3.SegmentHashGrid2d`1.FindNearestInRadius*
  nameWithType.vb: SegmentHashGrid2d(Of T).FindNearestInRadius(Vector2d, Double, Func(Of T, Double), Func(Of T, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.SegmentHashGrid2d(Of T).FindNearestInRadius(g3.Vector2d, System.Double, System.Func(Of T, System.Double), System.Func(Of T, System.Boolean))
  name.vb: FindNearestInRadius(Vector2d, Double, Func(Of T, Double), Func(Of T, Boolean))
- uid: g3.SegmentHashGrid2d`1.FindNearestInSquaredRadius(g3.Vector2d,System.Double,System.Func{`0,System.Double},System.Func{`0,System.Boolean})
  commentId: M:g3.SegmentHashGrid2d`1.FindNearestInSquaredRadius(g3.Vector2d,System.Double,System.Func{`0,System.Double},System.Func{`0,System.Boolean})
  id: FindNearestInSquaredRadius(g3.Vector2d,System.Double,System.Func{`0,System.Double},System.Func{`0,System.Boolean})
  parent: g3.SegmentHashGrid2d`1
  langs:
  - csharp
  - vb
  name: FindNearestInSquaredRadius(Vector2d, Double, Func<T, Double>, Func<T, Boolean>)
  nameWithType: SegmentHashGrid2d<T>.FindNearestInSquaredRadius(Vector2d, Double, Func<T, Double>, Func<T, Boolean>)
  fullName: g3.SegmentHashGrid2d<T>.FindNearestInSquaredRadius(g3.Vector2d, System.Double, System.Func<T, System.Double>, System.Func<T, System.Boolean>)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: FindNearestInSquaredRadius
    path: ../Assets/geometry3Sharp/spatial/SegmentHashGrid.cs
    startLine: 171
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nVariant of FindNearestInRadius that works with squared-distances.\nReturn value is pair (nearest_index,min_dist) or (invalidValue,double.MaxValue)\n"
  example: []
  syntax:
    content: public KeyValuePair<T, double> FindNearestInSquaredRadius(Vector2d query_pt, double radiusSqr, Func<T, double> distSqrF, Func<T, bool> ignoreF = null)
    parameters:
    - id: query_pt
      type: g3.Vector2d
    - id: radiusSqr
      type: System.Double
    - id: distSqrF
      type: System.Func{{T},System.Double}
    - id: ignoreF
      type: System.Func{{T},System.Boolean}
    return:
      type: System.Collections.Generic.KeyValuePair{{T},System.Double}
    content.vb: Public Function FindNearestInSquaredRadius(query_pt As Vector2d, radiusSqr As Double, distSqrF As Func(Of T, Double), ignoreF As Func(Of T, Boolean) = Nothing) As KeyValuePair(Of T, Double)
  overload: g3.SegmentHashGrid2d`1.FindNearestInSquaredRadius*
  nameWithType.vb: SegmentHashGrid2d(Of T).FindNearestInSquaredRadius(Vector2d, Double, Func(Of T, Double), Func(Of T, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.SegmentHashGrid2d(Of T).FindNearestInSquaredRadius(g3.Vector2d, System.Double, System.Func(Of T, System.Double), System.Func(Of T, System.Boolean))
  name.vb: FindNearestInSquaredRadius(Vector2d, Double, Func(Of T, Double), Func(Of T, Boolean))
references:
- uid: g3
  commentId: N:g3
  name: g3
  nameWithType: g3
  fullName: g3
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: g3.SegmentHashGrid2d`1.#ctor*
  commentId: Overload:g3.SegmentHashGrid2d`1.#ctor
  name: SegmentHashGrid2d
  nameWithType: SegmentHashGrid2d<T>.SegmentHashGrid2d
  fullName: g3.SegmentHashGrid2d<T>.SegmentHashGrid2d
  nameWithType.vb: SegmentHashGrid2d(Of T).SegmentHashGrid2d
  fullName.vb: g3.SegmentHashGrid2d(Of T).SegmentHashGrid2d
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: g3.SegmentHashGrid2d`1.InsertSegment*
  commentId: Overload:g3.SegmentHashGrid2d`1.InsertSegment
  name: InsertSegment
  nameWithType: SegmentHashGrid2d<T>.InsertSegment
  fullName: g3.SegmentHashGrid2d<T>.InsertSegment
  nameWithType.vb: SegmentHashGrid2d(Of T).InsertSegment
  fullName.vb: g3.SegmentHashGrid2d(Of T).InsertSegment
- uid: g3.Vector2d
  commentId: T:g3.Vector2d
  parent: g3
  name: Vector2d
  nameWithType: Vector2d
  fullName: g3.Vector2d
- uid: g3.SegmentHashGrid2d`1.InsertSegmentUnsafe*
  commentId: Overload:g3.SegmentHashGrid2d`1.InsertSegmentUnsafe
  name: InsertSegmentUnsafe
  nameWithType: SegmentHashGrid2d<T>.InsertSegmentUnsafe
  fullName: g3.SegmentHashGrid2d<T>.InsertSegmentUnsafe
  nameWithType.vb: SegmentHashGrid2d(Of T).InsertSegmentUnsafe
  fullName.vb: g3.SegmentHashGrid2d(Of T).InsertSegmentUnsafe
- uid: g3.SegmentHashGrid2d`1.RemoveSegment*
  commentId: Overload:g3.SegmentHashGrid2d`1.RemoveSegment
  name: RemoveSegment
  nameWithType: SegmentHashGrid2d<T>.RemoveSegment
  fullName: g3.SegmentHashGrid2d<T>.RemoveSegment
  nameWithType.vb: SegmentHashGrid2d(Of T).RemoveSegment
  fullName.vb: g3.SegmentHashGrid2d(Of T).RemoveSegment
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: g3.SegmentHashGrid2d`1.RemoveSegmentUnsafe*
  commentId: Overload:g3.SegmentHashGrid2d`1.RemoveSegmentUnsafe
  name: RemoveSegmentUnsafe
  nameWithType: SegmentHashGrid2d<T>.RemoveSegmentUnsafe
  fullName: g3.SegmentHashGrid2d<T>.RemoveSegmentUnsafe
  nameWithType.vb: SegmentHashGrid2d(Of T).RemoveSegmentUnsafe
  fullName.vb: g3.SegmentHashGrid2d(Of T).RemoveSegmentUnsafe
- uid: g3.SegmentHashGrid2d`1.UpdateSegment*
  commentId: Overload:g3.SegmentHashGrid2d`1.UpdateSegment
  name: UpdateSegment
  nameWithType: SegmentHashGrid2d<T>.UpdateSegment
  fullName: g3.SegmentHashGrid2d<T>.UpdateSegment
  nameWithType.vb: SegmentHashGrid2d(Of T).UpdateSegment
  fullName.vb: g3.SegmentHashGrid2d(Of T).UpdateSegment
- uid: g3.SegmentHashGrid2d`1.UpdateSegmentUnsafe*
  commentId: Overload:g3.SegmentHashGrid2d`1.UpdateSegmentUnsafe
  name: UpdateSegmentUnsafe
  nameWithType: SegmentHashGrid2d<T>.UpdateSegmentUnsafe
  fullName: g3.SegmentHashGrid2d<T>.UpdateSegmentUnsafe
  nameWithType.vb: SegmentHashGrid2d(Of T).UpdateSegmentUnsafe
  fullName.vb: g3.SegmentHashGrid2d(Of T).UpdateSegmentUnsafe
- uid: g3.SegmentHashGrid2d`1.FindNearestInRadius*
  commentId: Overload:g3.SegmentHashGrid2d`1.FindNearestInRadius
  name: FindNearestInRadius
  nameWithType: SegmentHashGrid2d<T>.FindNearestInRadius
  fullName: g3.SegmentHashGrid2d<T>.FindNearestInRadius
  nameWithType.vb: SegmentHashGrid2d(Of T).FindNearestInRadius
  fullName.vb: g3.SegmentHashGrid2d(Of T).FindNearestInRadius
- uid: System.Func{{T},System.Double}
  commentId: T:System.Func{`0,System.Double}
  parent: System
  definition: System.Func`2
  name: Func<T, Double>
  nameWithType: Func<T, Double>
  fullName: System.Func<T, System.Double>
  nameWithType.vb: Func(Of T, Double)
  fullName.vb: System.Func(Of T, System.Double)
  name.vb: Func(Of T, Double)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<T, Boolean>
  nameWithType: Func<T, Boolean>
  fullName: System.Func<T, System.Boolean>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, System.Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{{T},System.Double}
  commentId: T:System.Collections.Generic.KeyValuePair{`0,System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<T, Double>
  nameWithType: KeyValuePair<T, Double>
  fullName: System.Collections.Generic.KeyValuePair<T, System.Double>
  nameWithType.vb: KeyValuePair(Of T, Double)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of T, System.Double)
  name.vb: KeyValuePair(Of T, Double)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: g3.SegmentHashGrid2d`1.FindNearestInSquaredRadius*
  commentId: Overload:g3.SegmentHashGrid2d`1.FindNearestInSquaredRadius
  name: FindNearestInSquaredRadius
  nameWithType: SegmentHashGrid2d<T>.FindNearestInSquaredRadius
  fullName: g3.SegmentHashGrid2d<T>.FindNearestInSquaredRadius
  nameWithType.vb: SegmentHashGrid2d(Of T).FindNearestInSquaredRadius
  fullName.vb: g3.SegmentHashGrid2d(Of T).FindNearestInSquaredRadius
