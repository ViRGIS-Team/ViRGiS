### YamlMime:ManagedReference
items:
- uid: g3.GraphCells2d
  commentId: T:g3.GraphCells2d
  id: GraphCells2d
  parent: g3
  children:
  - g3.GraphCells2d.#ctor(g3.DGraph2)
  - g3.GraphCells2d.CellLoops
  - g3.GraphCells2d.CellsToPolygons(System.Func{g3.Polygon2d,System.Boolean})
  - g3.GraphCells2d.ContainedCells(g3.GeneralPolygon2d)
  - g3.GraphCells2d.FindCells
  - g3.GraphCells2d.Graph
  langs:
  - csharp
  - vb
  name: GraphCells2d
  nameWithType: GraphCells2d
  fullName: g3.GraphCells2d
  type: Class
  source:
    remote:
      path: Assets/geometry3Sharp/comp_geom/GraphCells2d.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: GraphCells2d
    path: ../Assets/geometry3Sharp/comp_geom/GraphCells2d.cs
    startLine: 19
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nThis class extracts the set of loops bounding the &quot;cells&quot; of a DGraph2, ie \neach cell is a connected region with a polygonal boundary. \nPrecondition: the graph has no self-intersections.\nPrecondition: at any vertex, the edges are sortable by angle (ie no outgoing edges overlap)\n** numerically this may not be 100% reliable....\n\nBoth &quot;sides&quot; of each edge are included in some cell boundary, ie so for a simple\npolygon, there are two cells, one infinitely large. The &quot;inside&quot; cells will be\noriented clockwise, if converted to a Polygon2d.\n\n"
  example: []
  syntax:
    content: public class GraphCells2d
    content.vb: Public Class GraphCells2d
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: g3.GraphCells2d.Graph
  commentId: F:g3.GraphCells2d.Graph
  id: Graph
  parent: g3.GraphCells2d
  langs:
  - csharp
  - vb
  name: Graph
  nameWithType: GraphCells2d.Graph
  fullName: g3.GraphCells2d.Graph
  type: Field
  source:
    remote:
      path: Assets/geometry3Sharp/comp_geom/GraphCells2d.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: Graph
    path: ../Assets/geometry3Sharp/comp_geom/GraphCells2d.cs
    startLine: 21
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public DGraph2 Graph
    return:
      type: g3.DGraph2
    content.vb: Public Graph As DGraph2
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: g3.GraphCells2d.CellLoops
  commentId: F:g3.GraphCells2d.CellLoops
  id: CellLoops
  parent: g3.GraphCells2d
  langs:
  - csharp
  - vb
  name: CellLoops
  nameWithType: GraphCells2d.CellLoops
  fullName: g3.GraphCells2d.CellLoops
  type: Field
  source:
    remote:
      path: Assets/geometry3Sharp/comp_geom/GraphCells2d.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: CellLoops
    path: ../Assets/geometry3Sharp/comp_geom/GraphCells2d.cs
    startLine: 28
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public List<int[]> CellLoops
    return:
      type: System.Collections.Generic.List{System.Int32[]}
    content.vb: Public CellLoops As List(Of Integer())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: g3.GraphCells2d.#ctor(g3.DGraph2)
  commentId: M:g3.GraphCells2d.#ctor(g3.DGraph2)
  id: '#ctor(g3.DGraph2)'
  parent: g3.GraphCells2d
  langs:
  - csharp
  - vb
  name: GraphCells2d(DGraph2)
  nameWithType: GraphCells2d.GraphCells2d(DGraph2)
  fullName: g3.GraphCells2d.GraphCells2d(g3.DGraph2)
  type: Constructor
  source:
    remote:
      path: Assets/geometry3Sharp/comp_geom/GraphCells2d.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: .ctor
    path: ../Assets/geometry3Sharp/comp_geom/GraphCells2d.cs
    startLine: 31
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public GraphCells2d(DGraph2 graph)
    parameters:
    - id: graph
      type: g3.DGraph2
    content.vb: Public Sub New(graph As DGraph2)
  overload: g3.GraphCells2d.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: g3.GraphCells2d.FindCells
  commentId: M:g3.GraphCells2d.FindCells
  id: FindCells
  parent: g3.GraphCells2d
  langs:
  - csharp
  - vb
  name: FindCells()
  nameWithType: GraphCells2d.FindCells()
  fullName: g3.GraphCells2d.FindCells()
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/comp_geom/GraphCells2d.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: FindCells
    path: ../Assets/geometry3Sharp/comp_geom/GraphCells2d.cs
    startLine: 36
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public void FindCells()
    content.vb: Public Sub FindCells
  overload: g3.GraphCells2d.FindCells*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: g3.GraphCells2d.CellsToPolygons(System.Func{g3.Polygon2d,System.Boolean})
  commentId: M:g3.GraphCells2d.CellsToPolygons(System.Func{g3.Polygon2d,System.Boolean})
  id: CellsToPolygons(System.Func{g3.Polygon2d,System.Boolean})
  parent: g3.GraphCells2d
  langs:
  - csharp
  - vb
  name: CellsToPolygons(Func<Polygon2d, Boolean>)
  nameWithType: GraphCells2d.CellsToPolygons(Func<Polygon2d, Boolean>)
  fullName: g3.GraphCells2d.CellsToPolygons(System.Func<g3.Polygon2d, System.Boolean>)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/comp_geom/GraphCells2d.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: CellsToPolygons
    path: ../Assets/geometry3Sharp/comp_geom/GraphCells2d.cs
    startLine: 113
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nConvert cells to polygons, with optional filter. \nIf filter returns false, polygon is not included in output\n"
  example: []
  syntax:
    content: public List<Polygon2d> CellsToPolygons(Func<Polygon2d, bool> FilterF = null)
    parameters:
    - id: FilterF
      type: System.Func{g3.Polygon2d,System.Boolean}
    return:
      type: System.Collections.Generic.List{g3.Polygon2d}
    content.vb: Public Function CellsToPolygons(FilterF As Func(Of Polygon2d, Boolean) = Nothing) As List(Of Polygon2d)
  overload: g3.GraphCells2d.CellsToPolygons*
  nameWithType.vb: GraphCells2d.CellsToPolygons(Func(Of Polygon2d, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.GraphCells2d.CellsToPolygons(System.Func(Of g3.Polygon2d, System.Boolean))
  name.vb: CellsToPolygons(Func(Of Polygon2d, Boolean))
- uid: g3.GraphCells2d.ContainedCells(g3.GeneralPolygon2d)
  commentId: M:g3.GraphCells2d.ContainedCells(g3.GeneralPolygon2d)
  id: ContainedCells(g3.GeneralPolygon2d)
  parent: g3.GraphCells2d
  langs:
  - csharp
  - vb
  name: ContainedCells(GeneralPolygon2d)
  nameWithType: GraphCells2d.ContainedCells(GeneralPolygon2d)
  fullName: g3.GraphCells2d.ContainedCells(g3.GeneralPolygon2d)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/comp_geom/GraphCells2d.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: ContainedCells
    path: ../Assets/geometry3Sharp/comp_geom/GraphCells2d.cs
    startLine: 138
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nFind cells that are &quot;inside&quot; the container polygon.\nCurrently based on finding a point inside the cell and then\nchecking that it is also inside the container. \nThis is perhaps not ideal!!\n"
  example: []
  syntax:
    content: public List<Polygon2d> ContainedCells(GeneralPolygon2d container)
    parameters:
    - id: container
      type: g3.GeneralPolygon2d
    return:
      type: System.Collections.Generic.List{g3.Polygon2d}
    content.vb: Public Function ContainedCells(container As GeneralPolygon2d) As List(Of Polygon2d)
  overload: g3.GraphCells2d.ContainedCells*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: g3
  commentId: N:g3
  name: g3
  nameWithType: g3
  fullName: g3
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: g3.DGraph2
  commentId: T:g3.DGraph2
  parent: g3
  name: DGraph2
  nameWithType: DGraph2
  fullName: g3.DGraph2
- uid: System.Collections.Generic.List{System.Int32[]}
  commentId: T:System.Collections.Generic.List{System.Int32[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32[]>
  nameWithType: List<Int32[]>
  fullName: System.Collections.Generic.List<System.Int32[]>
  nameWithType.vb: List(Of Int32())
  fullName.vb: System.Collections.Generic.List(Of System.Int32())
  name.vb: List(Of Int32())
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: g3.GraphCells2d.#ctor*
  commentId: Overload:g3.GraphCells2d.#ctor
  name: GraphCells2d
  nameWithType: GraphCells2d.GraphCells2d
  fullName: g3.GraphCells2d.GraphCells2d
- uid: g3.GraphCells2d.FindCells*
  commentId: Overload:g3.GraphCells2d.FindCells
  name: FindCells
  nameWithType: GraphCells2d.FindCells
  fullName: g3.GraphCells2d.FindCells
- uid: g3.GraphCells2d.CellsToPolygons*
  commentId: Overload:g3.GraphCells2d.CellsToPolygons
  name: CellsToPolygons
  nameWithType: GraphCells2d.CellsToPolygons
  fullName: g3.GraphCells2d.CellsToPolygons
- uid: System.Func{g3.Polygon2d,System.Boolean}
  commentId: T:System.Func{g3.Polygon2d,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Polygon2d, Boolean>
  nameWithType: Func<Polygon2d, Boolean>
  fullName: System.Func<g3.Polygon2d, System.Boolean>
  nameWithType.vb: Func(Of Polygon2d, Boolean)
  fullName.vb: System.Func(Of g3.Polygon2d, System.Boolean)
  name.vb: Func(Of Polygon2d, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: g3.Polygon2d
    name: Polygon2d
    nameWithType: Polygon2d
    fullName: g3.Polygon2d
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: g3.Polygon2d
    name: Polygon2d
    nameWithType: Polygon2d
    fullName: g3.Polygon2d
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{g3.Polygon2d}
  commentId: T:System.Collections.Generic.List{g3.Polygon2d}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Polygon2d>
  nameWithType: List<Polygon2d>
  fullName: System.Collections.Generic.List<g3.Polygon2d>
  nameWithType.vb: List(Of Polygon2d)
  fullName.vb: System.Collections.Generic.List(Of g3.Polygon2d)
  name.vb: List(Of Polygon2d)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: g3.Polygon2d
    name: Polygon2d
    nameWithType: Polygon2d
    fullName: g3.Polygon2d
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: g3.Polygon2d
    name: Polygon2d
    nameWithType: Polygon2d
    fullName: g3.Polygon2d
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: g3.GraphCells2d.ContainedCells*
  commentId: Overload:g3.GraphCells2d.ContainedCells
  name: ContainedCells
  nameWithType: GraphCells2d.ContainedCells
  fullName: g3.GraphCells2d.ContainedCells
- uid: g3.GeneralPolygon2d
  commentId: T:g3.GeneralPolygon2d
  parent: g3
  name: GeneralPolygon2d
  nameWithType: GeneralPolygon2d
  fullName: g3.GeneralPolygon2d
