### YamlMime:ManagedReference
items:
- uid: g3.SparseList`1
  commentId: T:g3.SparseList`1
  id: SparseList`1
  parent: g3
  children:
  - g3.SparseList`1.#ctor(System.Int32,System.Int32,`0)
  - g3.SparseList`1.Count(System.Func{`0,System.Boolean})
  - g3.SparseList`1.Item(System.Int32)
  - g3.SparseList`1.NonZeroValues
  - g3.SparseList`1.Values
  langs:
  - csharp
  - vb
  name: SparseList<T>
  nameWithType: SparseList<T>
  fullName: g3.SparseList<T>
  type: Class
  source:
    remote:
      path: Assets/geometry3Sharp/core/SparseList.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: SparseList
    path: ../Assets/geometry3Sharp/core/SparseList.cs
    startLine: 14
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: >-
      public class SparseList<T>
          where T : IEquatable<T>
    typeParameters:
    - id: T
    content.vb: Public Class SparseList(Of T As IEquatable(Of T))
  inheritance:
  - System.Object
  nameWithType.vb: SparseList(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: g3.SparseList(Of T)
  name.vb: SparseList(Of T)
- uid: g3.SparseList`1.#ctor(System.Int32,System.Int32,`0)
  commentId: M:g3.SparseList`1.#ctor(System.Int32,System.Int32,`0)
  id: '#ctor(System.Int32,System.Int32,`0)'
  parent: g3.SparseList`1
  langs:
  - csharp
  - vb
  name: SparseList(Int32, Int32, T)
  nameWithType: SparseList<T>.SparseList(Int32, Int32, T)
  fullName: g3.SparseList<T>.SparseList(System.Int32, System.Int32, T)
  type: Constructor
  source:
    remote:
      path: Assets/geometry3Sharp/core/SparseList.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: .ctor
    path: ../Assets/geometry3Sharp/core/SparseList.cs
    startLine: 20
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public SparseList(int MaxIndex, int SubsetCountEst, T ZeroValue)
    parameters:
    - id: MaxIndex
      type: System.Int32
    - id: SubsetCountEst
      type: System.Int32
    - id: ZeroValue
      type: '{T}'
    content.vb: Public Sub New(MaxIndex As Integer, SubsetCountEst As Integer, ZeroValue As T)
  overload: g3.SparseList`1.#ctor*
  nameWithType.vb: SparseList(Of T).SparseList(Int32, Int32, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.SparseList(Of T).SparseList(System.Int32, System.Int32, T)
- uid: g3.SparseList`1.Item(System.Int32)
  commentId: P:g3.SparseList`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: g3.SparseList`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: SparseList<T>.Item[Int32]
  fullName: g3.SparseList<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Assets/geometry3Sharp/core/SparseList.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: this[]
    path: ../Assets/geometry3Sharp/core/SparseList.cs
    startLine: 37
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public T this[int idx] { get; set; }
    parameters:
    - id: idx
      type: System.Int32
    return:
      type: '{T}'
    content.vb: Public Property Item(idx As Integer) As T
  overload: g3.SparseList`1.Item*
  nameWithType.vb: SparseList(Of T).Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: g3.SparseList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
- uid: g3.SparseList`1.Count(System.Func{`0,System.Boolean})
  commentId: M:g3.SparseList`1.Count(System.Func{`0,System.Boolean})
  id: Count(System.Func{`0,System.Boolean})
  parent: g3.SparseList`1
  langs:
  - csharp
  - vb
  name: Count(Func<T, Boolean>)
  nameWithType: SparseList<T>.Count(Func<T, Boolean>)
  fullName: g3.SparseList<T>.Count(System.Func<T, System.Boolean>)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/SparseList.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: Count
    path: ../Assets/geometry3Sharp/core/SparseList.cs
    startLine: 57
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public int Count(Func<T, bool> CountF)
    parameters:
    - id: CountF
      type: System.Func{{T},System.Boolean}
    return:
      type: System.Int32
    content.vb: Public Function Count(CountF As Func(Of T, Boolean)) As Integer
  overload: g3.SparseList`1.Count*
  nameWithType.vb: SparseList(Of T).Count(Func(Of T, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.SparseList(Of T).Count(System.Func(Of T, System.Boolean))
  name.vb: Count(Func(Of T, Boolean))
- uid: g3.SparseList`1.Values
  commentId: M:g3.SparseList`1.Values
  id: Values
  parent: g3.SparseList`1
  langs:
  - csharp
  - vb
  name: Values()
  nameWithType: SparseList<T>.Values()
  fullName: g3.SparseList<T>.Values()
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/SparseList.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: Values
    path: ../Assets/geometry3Sharp/core/SparseList.cs
    startLine: 77
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nThis enumeration will return pairs [index,0] for dense case\n"
  example: []
  syntax:
    content: public IEnumerable<KeyValuePair<int, T>> Values()
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,{T}}}
    content.vb: Public Function Values As IEnumerable(Of KeyValuePair(Of Integer, T))
  overload: g3.SparseList`1.Values*
  nameWithType.vb: SparseList(Of T).Values()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.SparseList(Of T).Values()
- uid: g3.SparseList`1.NonZeroValues
  commentId: M:g3.SparseList`1.NonZeroValues
  id: NonZeroValues
  parent: g3.SparseList`1
  langs:
  - csharp
  - vb
  name: NonZeroValues()
  nameWithType: SparseList<T>.NonZeroValues()
  fullName: g3.SparseList<T>.NonZeroValues()
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/SparseList.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: NonZeroValues
    path: ../Assets/geometry3Sharp/core/SparseList.cs
    startLine: 89
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public IEnumerable<KeyValuePair<int, T>> NonZeroValues()
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,{T}}}
    content.vb: Public Function NonZeroValues As IEnumerable(Of KeyValuePair(Of Integer, T))
  overload: g3.SparseList`1.NonZeroValues*
  nameWithType.vb: SparseList(Of T).NonZeroValues()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.SparseList(Of T).NonZeroValues()
references:
- uid: g3
  commentId: N:g3
  name: g3
  nameWithType: g3
  fullName: g3
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: g3.SparseList`1.#ctor*
  commentId: Overload:g3.SparseList`1.#ctor
  name: SparseList
  nameWithType: SparseList<T>.SparseList
  fullName: g3.SparseList<T>.SparseList
  nameWithType.vb: SparseList(Of T).SparseList
  fullName.vb: g3.SparseList(Of T).SparseList
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: g3.SparseList`1.Item*
  commentId: Overload:g3.SparseList`1.Item
  name: Item
  nameWithType: SparseList<T>.Item
  fullName: g3.SparseList<T>.Item
  nameWithType.vb: SparseList(Of T).Item
  fullName.vb: g3.SparseList(Of T).Item
- uid: g3.SparseList`1.Count*
  commentId: Overload:g3.SparseList`1.Count
  name: Count
  nameWithType: SparseList<T>.Count
  fullName: g3.SparseList<T>.Count
  nameWithType.vb: SparseList(Of T).Count
  fullName.vb: g3.SparseList(Of T).Count
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<T, Boolean>
  nameWithType: Func<T, Boolean>
  fullName: System.Func<T, System.Boolean>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, System.Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: g3.SparseList`1.Values*
  commentId: Overload:g3.SparseList`1.Values
  name: Values
  nameWithType: SparseList<T>.Values
  fullName: g3.SparseList<T>.Values
  nameWithType.vb: SparseList(Of T).Values
  fullName.vb: g3.SparseList(Of T).Values
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<Int32, T>>
  nameWithType: IEnumerable<KeyValuePair<Int32, T>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Int32, T>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of Int32, T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Int32, T))
  name.vb: IEnumerable(Of KeyValuePair(Of Int32, T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: g3.SparseList`1.NonZeroValues*
  commentId: Overload:g3.SparseList`1.NonZeroValues
  name: NonZeroValues
  nameWithType: SparseList<T>.NonZeroValues
  fullName: g3.SparseList<T>.NonZeroValues
  nameWithType.vb: SparseList(Of T).NonZeroValues
  fullName.vb: g3.SparseList(Of T).NonZeroValues
