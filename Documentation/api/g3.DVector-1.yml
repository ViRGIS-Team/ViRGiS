### YamlMime:ManagedReference
items:
- uid: g3.DVector`1
  commentId: T:g3.DVector`1
  id: DVector`1
  parent: g3
  children:
  - g3.DVector`1.#ctor
  - g3.DVector`1.#ctor(`0[])
  - g3.DVector`1.#ctor(g3.DVector{`0})
  - g3.DVector`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - g3.DVector`1.Add(`0)
  - g3.DVector`1.Add(`0,System.Int32)
  - g3.DVector`1.Add(`0[])
  - g3.DVector`1.Add(`0[],System.Int32)
  - g3.DVector`1.Apply(System.Action{`0,System.Int32})
  - g3.DVector`1.ApplyReplace(System.Func{`0,System.Int32,`0})
  - g3.DVector`1.back
  - g3.DVector`1.BlockCount
  - g3.DVector`1.BlockIterator
  - g3.DVector`1.Clear
  - g3.DVector`1.copy(g3.DVector{`0})
  - g3.DVector`1.empty
  - g3.DVector`1.FastGetBuffer(g3.DVector{System.Double},System.Double*)
  - g3.DVector`1.FastGetBuffer(g3.DVector{System.Int32},System.Int32*)
  - g3.DVector`1.FastGetBuffer(g3.DVector{System.Single},System.Single*)
  - g3.DVector`1.front
  - g3.DVector`1.GetBuffer
  - g3.DVector`1.GetBuffer(`0[])
  - g3.DVector`1.GetBufferCast``1
  - g3.DVector`1.GetBytes
  - g3.DVector`1.GetEnumerator
  - g3.DVector`1.Initialize(`0[])
  - g3.DVector`1.insert(`0,System.Int32)
  - g3.DVector`1.insertAt(`0,System.Int32)
  - g3.DVector`1.Item(System.Int32)
  - g3.DVector`1.Length
  - g3.DVector`1.MemoryUsageBytes
  - g3.DVector`1.pop_back
  - g3.DVector`1.push_back(`0)
  - g3.DVector`1.resize(System.Int32)
  - g3.DVector`1.size
  - g3.DVector`1.ToArray
  langs:
  - csharp
  - vb
  name: DVector<T>
  nameWithType: DVector<T>
  fullName: g3.DVector<T>
  type: Class
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: DVector
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 13
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: 'public class DVector<T> : IEnumerable<T>, IEnumerable'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class DVector(Of T)
          Implements IEnumerable(Of T), IEnumerable
  inheritance:
  - System.Object
  nameWithType.vb: DVector(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: g3.DVector(Of T)
  name.vb: DVector(Of T)
- uid: g3.DVector`1.#ctor
  commentId: M:g3.DVector`1.#ctor
  id: '#ctor'
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: DVector()
  nameWithType: DVector<T>.DVector()
  fullName: g3.DVector<T>.DVector()
  type: Constructor
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: .ctor
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 24
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public DVector()
    content.vb: Public Sub New
  overload: g3.DVector`1.#ctor*
  nameWithType.vb: DVector(Of T).DVector()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).DVector()
- uid: g3.DVector`1.#ctor(g3.DVector{`0})
  commentId: M:g3.DVector`1.#ctor(g3.DVector{`0})
  id: '#ctor(g3.DVector{`0})'
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: DVector(DVector<T>)
  nameWithType: DVector<T>.DVector(DVector<T>)
  fullName: g3.DVector<T>.DVector(g3.DVector<T>)
  type: Constructor
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: .ctor
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 31
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public DVector(DVector<T> copy)
    parameters:
    - id: copy
      type: g3.DVector`1
    content.vb: Public Sub New(copy As DVector(Of T))
  overload: g3.DVector`1.#ctor*
  nameWithType.vb: DVector(Of T).DVector(DVector(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).DVector(g3.DVector(Of T))
  name.vb: DVector(DVector(Of T))
- uid: g3.DVector`1.#ctor(`0[])
  commentId: M:g3.DVector`1.#ctor(`0[])
  id: '#ctor(`0[])'
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: DVector(T[])
  nameWithType: DVector<T>.DVector(T[])
  fullName: g3.DVector<T>.DVector(T[])
  type: Constructor
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: .ctor
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 43
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public DVector(T[] data)
    parameters:
    - id: data
      type: '{T}[]'
    content.vb: Public Sub New(data As T())
  overload: g3.DVector`1.#ctor*
  nameWithType.vb: DVector(Of T).DVector(T())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).DVector(T())
  name.vb: DVector(T())
- uid: g3.DVector`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:g3.DVector`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: DVector(IEnumerable<T>)
  nameWithType: DVector<T>.DVector(IEnumerable<T>)
  fullName: g3.DVector<T>.DVector(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: .ctor
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 48
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public DVector(IEnumerable<T> init)
    parameters:
    - id: init
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Sub New(init As IEnumerable(Of T))
  overload: g3.DVector`1.#ctor*
  nameWithType.vb: DVector(Of T).DVector(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).DVector(System.Collections.Generic.IEnumerable(Of T))
  name.vb: DVector(IEnumerable(Of T))
- uid: g3.DVector`1.Length
  commentId: P:g3.DVector`1.Length
  id: Length
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: DVector<T>.Length
  fullName: g3.DVector<T>.Length
  type: Property
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: Length
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 64
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public int Length { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Length As Integer
  overload: g3.DVector`1.Length*
  nameWithType.vb: DVector(Of T).Length
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: g3.DVector(Of T).Length
- uid: g3.DVector`1.BlockCount
  commentId: P:g3.DVector`1.BlockCount
  id: BlockCount
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: BlockCount
  nameWithType: DVector<T>.BlockCount
  fullName: g3.DVector<T>.BlockCount
  type: Property
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: BlockCount
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 68
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public int BlockCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property BlockCount As Integer
  overload: g3.DVector`1.BlockCount*
  nameWithType.vb: DVector(Of T).BlockCount
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: g3.DVector(Of T).BlockCount
- uid: g3.DVector`1.size
  commentId: P:g3.DVector`1.size
  id: size
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: size
  nameWithType: DVector<T>.size
  fullName: g3.DVector<T>.size
  type: Property
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: size
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 72
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public int size { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property size As Integer
  overload: g3.DVector`1.size*
  nameWithType.vb: DVector(Of T).size
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: g3.DVector(Of T).size
- uid: g3.DVector`1.empty
  commentId: P:g3.DVector`1.empty
  id: empty
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: empty
  nameWithType: DVector<T>.empty
  fullName: g3.DVector<T>.empty
  type: Property
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: empty
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 76
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public bool empty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property empty As Boolean
  overload: g3.DVector`1.empty*
  nameWithType.vb: DVector(Of T).empty
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: g3.DVector(Of T).empty
- uid: g3.DVector`1.MemoryUsageBytes
  commentId: P:g3.DVector`1.MemoryUsageBytes
  id: MemoryUsageBytes
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: MemoryUsageBytes
  nameWithType: DVector<T>.MemoryUsageBytes
  fullName: g3.DVector<T>.MemoryUsageBytes
  type: Property
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: MemoryUsageBytes
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 81
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public int MemoryUsageBytes { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property MemoryUsageBytes As Integer
  overload: g3.DVector`1.MemoryUsageBytes*
  nameWithType.vb: DVector(Of T).MemoryUsageBytes
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: g3.DVector(Of T).MemoryUsageBytes
- uid: g3.DVector`1.Add(`0)
  commentId: M:g3.DVector`1.Add(`0)
  id: Add(`0)
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: DVector<T>.Add(T)
  fullName: g3.DVector<T>.Add(T)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: Add
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 85
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public void Add(T value)
    parameters:
    - id: value
      type: '{T}'
    content.vb: Public Sub Add(value As T)
  overload: g3.DVector`1.Add*
  nameWithType.vb: DVector(Of T).Add(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).Add(T)
- uid: g3.DVector`1.Add(`0,System.Int32)
  commentId: M:g3.DVector`1.Add(`0,System.Int32)
  id: Add(`0,System.Int32)
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: Add(T, Int32)
  nameWithType: DVector<T>.Add(T, Int32)
  fullName: g3.DVector<T>.Add(T, System.Int32)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: Add
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 97
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public void Add(T value, int nRepeat)
    parameters:
    - id: value
      type: '{T}'
    - id: nRepeat
      type: System.Int32
    content.vb: Public Sub Add(value As T, nRepeat As Integer)
  overload: g3.DVector`1.Add*
  nameWithType.vb: DVector(Of T).Add(T, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).Add(T, System.Int32)
- uid: g3.DVector`1.Add(`0[])
  commentId: M:g3.DVector`1.Add(`0[])
  id: Add(`0[])
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: Add(T[])
  nameWithType: DVector<T>.Add(T[])
  fullName: g3.DVector<T>.Add(T[])
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: Add
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 102
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public void Add(T[] values)
    parameters:
    - id: values
      type: '{T}[]'
    content.vb: Public Sub Add(values As T())
  overload: g3.DVector`1.Add*
  nameWithType.vb: DVector(Of T).Add(T())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).Add(T())
  name.vb: Add(T())
- uid: g3.DVector`1.Add(`0[],System.Int32)
  commentId: M:g3.DVector`1.Add(`0[],System.Int32)
  id: Add(`0[],System.Int32)
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: Add(T[], Int32)
  nameWithType: DVector<T>.Add(T[], Int32)
  fullName: g3.DVector<T>.Add(T[], System.Int32)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: Add
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 109
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public void Add(T[] values, int nRepeat)
    parameters:
    - id: values
      type: '{T}[]'
    - id: nRepeat
      type: System.Int32
    content.vb: Public Sub Add(values As T(), nRepeat As Integer)
  overload: g3.DVector`1.Add*
  nameWithType.vb: DVector(Of T).Add(T(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).Add(T(), System.Int32)
  name.vb: Add(T(), Int32)
- uid: g3.DVector`1.push_back(`0)
  commentId: M:g3.DVector`1.push_back(`0)
  id: push_back(`0)
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: push_back(T)
  nameWithType: DVector<T>.push_back(T)
  fullName: g3.DVector<T>.push_back(T)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: push_back
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 117
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public void push_back(T value)
    parameters:
    - id: value
      type: '{T}'
    content.vb: Public Sub push_back(value As T)
  overload: g3.DVector`1.push_back*
  nameWithType.vb: DVector(Of T).push_back(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).push_back(T)
- uid: g3.DVector`1.pop_back
  commentId: M:g3.DVector`1.pop_back
  id: pop_back
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: pop_back()
  nameWithType: DVector<T>.pop_back()
  fullName: g3.DVector<T>.pop_back()
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: pop_back
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 120
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public void pop_back()
    content.vb: Public Sub pop_back
  overload: g3.DVector`1.pop_back*
  nameWithType.vb: DVector(Of T).pop_back()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).pop_back()
- uid: g3.DVector`1.insert(`0,System.Int32)
  commentId: M:g3.DVector`1.insert(`0,System.Int32)
  id: insert(`0,System.Int32)
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: insert(T, Int32)
  nameWithType: DVector<T>.insert(T, Int32)
  fullName: g3.DVector<T>.insert(T, System.Int32)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: insert
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 132
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public void insert(T value, int index)
    parameters:
    - id: value
      type: '{T}'
    - id: index
      type: System.Int32
    content.vb: Public Sub insert(value As T, index As Integer)
  overload: g3.DVector`1.insert*
  nameWithType.vb: DVector(Of T).insert(T, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).insert(T, System.Int32)
- uid: g3.DVector`1.insertAt(`0,System.Int32)
  commentId: M:g3.DVector`1.insertAt(`0,System.Int32)
  id: insertAt(`0,System.Int32)
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: insertAt(T, Int32)
  nameWithType: DVector<T>.insertAt(T, Int32)
  fullName: g3.DVector<T>.insertAt(T, System.Int32)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: insertAt
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 135
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public void insertAt(T value, int index)
    parameters:
    - id: value
      type: '{T}'
    - id: index
      type: System.Int32
    content.vb: Public Sub insertAt(value As T, index As Integer)
  overload: g3.DVector`1.insertAt*
  nameWithType.vb: DVector(Of T).insertAt(T, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).insertAt(T, System.Int32)
- uid: g3.DVector`1.resize(System.Int32)
  commentId: M:g3.DVector`1.resize(System.Int32)
  id: resize(System.Int32)
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: resize(Int32)
  nameWithType: DVector<T>.resize(Int32)
  fullName: g3.DVector<T>.resize(System.Int32)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: resize
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 148
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public void resize(int count)
    parameters:
    - id: count
      type: System.Int32
    content.vb: Public Sub resize(count As Integer)
  overload: g3.DVector`1.resize*
  nameWithType.vb: DVector(Of T).resize(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).resize(System.Int32)
- uid: g3.DVector`1.copy(g3.DVector{`0})
  commentId: M:g3.DVector`1.copy(g3.DVector{`0})
  id: copy(g3.DVector{`0})
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: copy(DVector<T>)
  nameWithType: DVector<T>.copy(DVector<T>)
  fullName: g3.DVector<T>.copy(g3.DVector<T>)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: copy
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 180
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public void copy(DVector<T> copyIn)
    parameters:
    - id: copyIn
      type: g3.DVector`1
    content.vb: Public Sub copy(copyIn As DVector(Of T))
  overload: g3.DVector`1.copy*
  nameWithType.vb: DVector(Of T).copy(DVector(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).copy(g3.DVector(Of T))
  name.vb: copy(DVector(Of T))
- uid: g3.DVector`1.Item(System.Int32)
  commentId: P:g3.DVector`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: DVector<T>.Item[Int32]
  fullName: g3.DVector<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: this[]
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 200
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public T this[int i] { get; set; }
    parameters:
    - id: i
      type: System.Int32
    return:
      type: '{T}'
    content.vb: Public Property Item(i As Integer) As T
  overload: g3.DVector`1.Item*
  nameWithType.vb: DVector(Of T).Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).Item(System.Int32)
  name.vb: Item(Int32)
- uid: g3.DVector`1.back
  commentId: P:g3.DVector`1.back
  id: back
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: back
  nameWithType: DVector<T>.back
  fullName: g3.DVector<T>.back
  type: Property
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: back
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 220
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public T back { get; set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Property back As T
  overload: g3.DVector`1.back*
  nameWithType.vb: DVector(Of T).back
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).back
- uid: g3.DVector`1.front
  commentId: P:g3.DVector`1.front
  id: front
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: front
  nameWithType: DVector<T>.front
  fullName: g3.DVector<T>.front
  type: Property
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: front
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 224
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public T front { get; set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Property front As T
  overload: g3.DVector`1.front*
  nameWithType.vb: DVector(Of T).front
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).front
- uid: g3.DVector`1.GetBuffer(`0[])
  commentId: M:g3.DVector`1.GetBuffer(`0[])
  id: GetBuffer(`0[])
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: GetBuffer(T[])
  nameWithType: DVector<T>.GetBuffer(T[])
  fullName: g3.DVector<T>.GetBuffer(T[])
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: GetBuffer
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 237
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public void GetBuffer(T[] data)
    parameters:
    - id: data
      type: '{T}[]'
    content.vb: Public Sub GetBuffer(data As T())
  overload: g3.DVector`1.GetBuffer*
  nameWithType.vb: DVector(Of T).GetBuffer(T())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).GetBuffer(T())
  name.vb: GetBuffer(T())
- uid: g3.DVector`1.GetBuffer
  commentId: M:g3.DVector`1.GetBuffer
  id: GetBuffer
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: GetBuffer()
  nameWithType: DVector<T>.GetBuffer()
  fullName: g3.DVector<T>.GetBuffer()
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: GetBuffer
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 243
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public T[] GetBuffer()
    return:
      type: '{T}[]'
    content.vb: Public Function GetBuffer As T()
  overload: g3.DVector`1.GetBuffer*
  nameWithType.vb: DVector(Of T).GetBuffer()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).GetBuffer()
- uid: g3.DVector`1.ToArray
  commentId: M:g3.DVector`1.ToArray
  id: ToArray
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: DVector<T>.ToArray()
  fullName: g3.DVector<T>.ToArray()
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: ToArray
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 250
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public T[] ToArray()
    return:
      type: '{T}[]'
    content.vb: Public Function ToArray As T()
  overload: g3.DVector`1.ToArray*
  nameWithType.vb: DVector(Of T).ToArray()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).ToArray()
- uid: g3.DVector`1.GetBufferCast``1
  commentId: M:g3.DVector`1.GetBufferCast``1
  id: GetBufferCast``1
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: GetBufferCast<T2>()
  nameWithType: DVector<T>.GetBufferCast<T2>()
  fullName: g3.DVector<T>.GetBufferCast<T2>()
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: GetBufferCast
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 255
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public T2[] GetBufferCast<T2>()
    typeParameters:
    - id: T2
    return:
      type: '{T2}[]'
    content.vb: Public Function GetBufferCast(Of T2) As T2()
  overload: g3.DVector`1.GetBufferCast*
  nameWithType.vb: DVector(Of T).GetBufferCast(Of T2)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).GetBufferCast(Of T2)()
  name.vb: GetBufferCast(Of T2)()
- uid: g3.DVector`1.GetBytes
  commentId: M:g3.DVector`1.GetBytes
  id: GetBytes
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: GetBytes()
  nameWithType: DVector<T>.GetBytes()
  fullName: g3.DVector<T>.GetBytes()
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: GetBytes
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 264
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public byte[] GetBytes()
    return:
      type: System.Byte[]
    content.vb: Public Function GetBytes As Byte()
  overload: g3.DVector`1.GetBytes*
  nameWithType.vb: DVector(Of T).GetBytes()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).GetBytes()
- uid: g3.DVector`1.Initialize(`0[])
  commentId: M:g3.DVector`1.Initialize(`0[])
  id: Initialize(`0[])
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: Initialize(T[])
  nameWithType: DVector<T>.Initialize(T[])
  fullName: g3.DVector<T>.Initialize(T[])
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: Initialize
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 281
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public void Initialize(T[] data)
    parameters:
    - id: data
      type: '{T}[]'
    content.vb: Public Sub Initialize(data As T())
  overload: g3.DVector`1.Initialize*
  nameWithType.vb: DVector(Of T).Initialize(T())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).Initialize(T())
  name.vb: Initialize(T())
- uid: g3.DVector`1.Clear
  commentId: M:g3.DVector`1.Clear
  id: Clear
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: DVector<T>.Clear()
  fullName: g3.DVector<T>.Clear()
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: Clear
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 309
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nCalls Array.Clear() on each block, which sets value to &apos;default&apos; for type\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: g3.DVector`1.Clear*
  nameWithType.vb: DVector(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).Clear()
- uid: g3.DVector`1.Apply(System.Action{`0,System.Int32})
  commentId: M:g3.DVector`1.Apply(System.Action{`0,System.Int32})
  id: Apply(System.Action{`0,System.Int32})
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: Apply(Action<T, Int32>)
  nameWithType: DVector<T>.Apply(Action<T, Int32>)
  fullName: g3.DVector<T>.Apply(System.Action<T, System.Int32>)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: Apply
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 320
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nApply action to each element of vector. Iterates by block so this is more efficient.\n"
  example: []
  syntax:
    content: public void Apply(Action<T, int> applyF)
    parameters:
    - id: applyF
      type: System.Action{{T},System.Int32}
    content.vb: Public Sub Apply(applyF As Action(Of T, Integer))
  overload: g3.DVector`1.Apply*
  nameWithType.vb: DVector(Of T).Apply(Action(Of T, Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).Apply(System.Action(Of T, System.Int32))
  name.vb: Apply(Action(Of T, Int32))
- uid: g3.DVector`1.ApplyReplace(System.Func{`0,System.Int32,`0})
  commentId: M:g3.DVector`1.ApplyReplace(System.Func{`0,System.Int32,`0})
  id: ApplyReplace(System.Func{`0,System.Int32,`0})
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: ApplyReplace(Func<T, Int32, T>)
  nameWithType: DVector<T>.ApplyReplace(Func<T, Int32, T>)
  fullName: g3.DVector<T>.ApplyReplace(System.Func<T, System.Int32, T>)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: ApplyReplace
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 336
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nset vec[i] = applyF(vec[i], i) for each element of vector\n"
  example: []
  syntax:
    content: public void ApplyReplace(Func<T, int, T> applyF)
    parameters:
    - id: applyF
      type: System.Func{{T},System.Int32,{T}}
    content.vb: Public Sub ApplyReplace(applyF As Func(Of T, Integer, T))
  overload: g3.DVector`1.ApplyReplace*
  nameWithType.vb: DVector(Of T).ApplyReplace(Func(Of T, Int32, T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).ApplyReplace(System.Func(Of T, System.Int32, T))
  name.vb: ApplyReplace(Func(Of T, Int32, T))
- uid: g3.DVector`1.FastGetBuffer(g3.DVector{System.Double},System.Double*)
  commentId: M:g3.DVector`1.FastGetBuffer(g3.DVector{System.Double},System.Double*)
  id: FastGetBuffer(g3.DVector{System.Double},System.Double*)
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: FastGetBuffer(DVector<Double>, Double*)
  nameWithType: DVector<T>.FastGetBuffer(DVector<Double>, Double*)
  fullName: g3.DVector<T>.FastGetBuffer(g3.DVector<System.Double>, System.Double*)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: FastGetBuffer
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 357
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public static void FastGetBuffer(DVector<double> v, double *pBuffer)
    parameters:
    - id: v
      type: g3.DVector{System.Double}
    - id: pBuffer
      type: System.Double*
    content.vb: Public Shared Sub FastGetBuffer(v As DVector(Of Double), pBuffer As Double *)
  overload: g3.DVector`1.FastGetBuffer*
  nameWithType.vb: DVector(Of T).FastGetBuffer(DVector(Of Double), Double*)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: g3.DVector(Of T).FastGetBuffer(g3.DVector(Of System.Double), System.Double*)
  name.vb: FastGetBuffer(DVector(Of Double), Double*)
- uid: g3.DVector`1.FastGetBuffer(g3.DVector{System.Single},System.Single*)
  commentId: M:g3.DVector`1.FastGetBuffer(g3.DVector{System.Single},System.Single*)
  id: FastGetBuffer(g3.DVector{System.Single},System.Single*)
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: FastGetBuffer(DVector<Single>, Single*)
  nameWithType: DVector<T>.FastGetBuffer(DVector<Single>, Single*)
  fullName: g3.DVector<T>.FastGetBuffer(g3.DVector<System.Single>, System.Single*)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: FastGetBuffer
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 368
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public static void FastGetBuffer(DVector<float> v, float *pBuffer)
    parameters:
    - id: v
      type: g3.DVector{System.Single}
    - id: pBuffer
      type: System.Single*
    content.vb: Public Shared Sub FastGetBuffer(v As DVector(Of Single), pBuffer As Single *)
  overload: g3.DVector`1.FastGetBuffer*
  nameWithType.vb: DVector(Of T).FastGetBuffer(DVector(Of Single), Single*)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: g3.DVector(Of T).FastGetBuffer(g3.DVector(Of System.Single), System.Single*)
  name.vb: FastGetBuffer(DVector(Of Single), Single*)
- uid: g3.DVector`1.FastGetBuffer(g3.DVector{System.Int32},System.Int32*)
  commentId: M:g3.DVector`1.FastGetBuffer(g3.DVector{System.Int32},System.Int32*)
  id: FastGetBuffer(g3.DVector{System.Int32},System.Int32*)
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: FastGetBuffer(DVector<Int32>, Int32*)
  nameWithType: DVector<T>.FastGetBuffer(DVector<Int32>, Int32*)
  fullName: g3.DVector<T>.FastGetBuffer(g3.DVector<System.Int32>, System.Int32*)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: FastGetBuffer
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 379
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public static void FastGetBuffer(DVector<int> v, int *pBuffer)
    parameters:
    - id: v
      type: g3.DVector{System.Int32}
    - id: pBuffer
      type: System.Int32*
    content.vb: Public Shared Sub FastGetBuffer(v As DVector(Of Integer), pBuffer As Integer *)
  overload: g3.DVector`1.FastGetBuffer*
  nameWithType.vb: DVector(Of T).FastGetBuffer(DVector(Of Int32), Int32*)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: g3.DVector(Of T).FastGetBuffer(g3.DVector(Of System.Int32), System.Int32*)
  name.vb: FastGetBuffer(DVector(Of Int32), Int32*)
- uid: g3.DVector`1.GetEnumerator
  commentId: M:g3.DVector`1.GetEnumerator
  id: GetEnumerator
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: DVector<T>.GetEnumerator()
  fullName: g3.DVector<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: GetEnumerator
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 393
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of T)
  overload: g3.DVector`1.GetEnumerator*
  nameWithType.vb: DVector(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).GetEnumerator()
- uid: g3.DVector`1.BlockIterator
  commentId: M:g3.DVector`1.BlockIterator
  id: BlockIterator
  parent: g3.DVector`1
  langs:
  - csharp
  - vb
  name: BlockIterator()
  nameWithType: DVector<T>.BlockIterator()
  fullName: g3.DVector<T>.BlockIterator()
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/core/DVector.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: BlockIterator
    path: ../Assets/geometry3Sharp/core/DVector.cs
    startLine: 415
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public IEnumerable<DVector<T>.DBlock> BlockIterator()
    return:
      type: System.Collections.Generic.IEnumerable{g3.DVector`1.DBlock}
    content.vb: Public Function BlockIterator As IEnumerable(Of DVector(Of T).DBlock)
  overload: g3.DVector`1.BlockIterator*
  nameWithType.vb: DVector(Of T).BlockIterator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: g3.DVector(Of T).BlockIterator()
references:
- uid: g3
  commentId: N:g3
  name: g3
  nameWithType: g3
  fullName: g3
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: g3.DVector`1.#ctor*
  commentId: Overload:g3.DVector`1.#ctor
  name: DVector
  nameWithType: DVector<T>.DVector
  fullName: g3.DVector<T>.DVector
  nameWithType.vb: DVector(Of T).DVector
  fullName.vb: g3.DVector(Of T).DVector
- uid: g3.DVector`1
  commentId: T:g3.DVector`1
  parent: g3
  name: DVector<T>
  nameWithType: DVector<T>
  fullName: g3.DVector<T>
  nameWithType.vb: DVector(Of T)
  fullName.vb: g3.DVector(Of T)
  name.vb: DVector(Of T)
  spec.csharp:
  - uid: g3.DVector`1
    name: DVector
    nameWithType: DVector
    fullName: g3.DVector
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: g3.DVector`1
    name: DVector
    nameWithType: DVector
    fullName: g3.DVector
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: g3.DVector`1.Length*
  commentId: Overload:g3.DVector`1.Length
  name: Length
  nameWithType: DVector<T>.Length
  fullName: g3.DVector<T>.Length
  nameWithType.vb: DVector(Of T).Length
  fullName.vb: g3.DVector(Of T).Length
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: g3.DVector`1.BlockCount*
  commentId: Overload:g3.DVector`1.BlockCount
  name: BlockCount
  nameWithType: DVector<T>.BlockCount
  fullName: g3.DVector<T>.BlockCount
  nameWithType.vb: DVector(Of T).BlockCount
  fullName.vb: g3.DVector(Of T).BlockCount
- uid: g3.DVector`1.size*
  commentId: Overload:g3.DVector`1.size
  name: size
  nameWithType: DVector<T>.size
  fullName: g3.DVector<T>.size
  nameWithType.vb: DVector(Of T).size
  fullName.vb: g3.DVector(Of T).size
- uid: g3.DVector`1.empty*
  commentId: Overload:g3.DVector`1.empty
  name: empty
  nameWithType: DVector<T>.empty
  fullName: g3.DVector<T>.empty
  nameWithType.vb: DVector(Of T).empty
  fullName.vb: g3.DVector(Of T).empty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: g3.DVector`1.MemoryUsageBytes*
  commentId: Overload:g3.DVector`1.MemoryUsageBytes
  name: MemoryUsageBytes
  nameWithType: DVector<T>.MemoryUsageBytes
  fullName: g3.DVector<T>.MemoryUsageBytes
  nameWithType.vb: DVector(Of T).MemoryUsageBytes
  fullName.vb: g3.DVector(Of T).MemoryUsageBytes
- uid: g3.DVector`1.Add*
  commentId: Overload:g3.DVector`1.Add
  name: Add
  nameWithType: DVector<T>.Add
  fullName: g3.DVector<T>.Add
  nameWithType.vb: DVector(Of T).Add
  fullName.vb: g3.DVector(Of T).Add
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: g3.DVector`1.push_back*
  commentId: Overload:g3.DVector`1.push_back
  name: push_back
  nameWithType: DVector<T>.push_back
  fullName: g3.DVector<T>.push_back
  nameWithType.vb: DVector(Of T).push_back
  fullName.vb: g3.DVector(Of T).push_back
- uid: g3.DVector`1.pop_back*
  commentId: Overload:g3.DVector`1.pop_back
  name: pop_back
  nameWithType: DVector<T>.pop_back
  fullName: g3.DVector<T>.pop_back
  nameWithType.vb: DVector(Of T).pop_back
  fullName.vb: g3.DVector(Of T).pop_back
- uid: g3.DVector`1.insert*
  commentId: Overload:g3.DVector`1.insert
  name: insert
  nameWithType: DVector<T>.insert
  fullName: g3.DVector<T>.insert
  nameWithType.vb: DVector(Of T).insert
  fullName.vb: g3.DVector(Of T).insert
- uid: g3.DVector`1.insertAt*
  commentId: Overload:g3.DVector`1.insertAt
  name: insertAt
  nameWithType: DVector<T>.insertAt
  fullName: g3.DVector<T>.insertAt
  nameWithType.vb: DVector(Of T).insertAt
  fullName.vb: g3.DVector(Of T).insertAt
- uid: g3.DVector`1.resize*
  commentId: Overload:g3.DVector`1.resize
  name: resize
  nameWithType: DVector<T>.resize
  fullName: g3.DVector<T>.resize
  nameWithType.vb: DVector(Of T).resize
  fullName.vb: g3.DVector(Of T).resize
- uid: g3.DVector`1.copy*
  commentId: Overload:g3.DVector`1.copy
  name: copy
  nameWithType: DVector<T>.copy
  fullName: g3.DVector<T>.copy
  nameWithType.vb: DVector(Of T).copy
  fullName.vb: g3.DVector(Of T).copy
- uid: g3.DVector`1.Item*
  commentId: Overload:g3.DVector`1.Item
  name: Item
  nameWithType: DVector<T>.Item
  fullName: g3.DVector<T>.Item
  nameWithType.vb: DVector(Of T).Item
  fullName.vb: g3.DVector(Of T).Item
- uid: g3.DVector`1.back*
  commentId: Overload:g3.DVector`1.back
  name: back
  nameWithType: DVector<T>.back
  fullName: g3.DVector<T>.back
  nameWithType.vb: DVector(Of T).back
  fullName.vb: g3.DVector(Of T).back
- uid: g3.DVector`1.front*
  commentId: Overload:g3.DVector`1.front
  name: front
  nameWithType: DVector<T>.front
  fullName: g3.DVector<T>.front
  nameWithType.vb: DVector(Of T).front
  fullName.vb: g3.DVector(Of T).front
- uid: g3.DVector`1.GetBuffer*
  commentId: Overload:g3.DVector`1.GetBuffer
  name: GetBuffer
  nameWithType: DVector<T>.GetBuffer
  fullName: g3.DVector<T>.GetBuffer
  nameWithType.vb: DVector(Of T).GetBuffer
  fullName.vb: g3.DVector(Of T).GetBuffer
- uid: g3.DVector`1.ToArray*
  commentId: Overload:g3.DVector`1.ToArray
  name: ToArray
  nameWithType: DVector<T>.ToArray
  fullName: g3.DVector<T>.ToArray
  nameWithType.vb: DVector(Of T).ToArray
  fullName.vb: g3.DVector(Of T).ToArray
- uid: g3.DVector`1.GetBufferCast*
  commentId: Overload:g3.DVector`1.GetBufferCast
  name: GetBufferCast
  nameWithType: DVector<T>.GetBufferCast
  fullName: g3.DVector<T>.GetBufferCast
  nameWithType.vb: DVector(Of T).GetBufferCast
  fullName.vb: g3.DVector(Of T).GetBufferCast
- uid: '{T2}[]'
  isExternal: true
  name: T2[]
  nameWithType: T2[]
  fullName: T2[]
  nameWithType.vb: T2()
  fullName.vb: T2()
  name.vb: T2()
  spec.csharp:
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: g3.DVector`1.GetBytes*
  commentId: Overload:g3.DVector`1.GetBytes
  name: GetBytes
  nameWithType: DVector<T>.GetBytes
  fullName: g3.DVector<T>.GetBytes
  nameWithType.vb: DVector(Of T).GetBytes
  fullName.vb: g3.DVector(Of T).GetBytes
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: g3.DVector`1.Initialize*
  commentId: Overload:g3.DVector`1.Initialize
  name: Initialize
  nameWithType: DVector<T>.Initialize
  fullName: g3.DVector<T>.Initialize
  nameWithType.vb: DVector(Of T).Initialize
  fullName.vb: g3.DVector(Of T).Initialize
- uid: g3.DVector`1.Clear*
  commentId: Overload:g3.DVector`1.Clear
  name: Clear
  nameWithType: DVector<T>.Clear
  fullName: g3.DVector<T>.Clear
  nameWithType.vb: DVector(Of T).Clear
  fullName.vb: g3.DVector(Of T).Clear
- uid: g3.DVector`1.Apply*
  commentId: Overload:g3.DVector`1.Apply
  name: Apply
  nameWithType: DVector<T>.Apply
  fullName: g3.DVector<T>.Apply
  nameWithType.vb: DVector(Of T).Apply
  fullName.vb: g3.DVector(Of T).Apply
- uid: System.Action{{T},System.Int32}
  commentId: T:System.Action{`0,System.Int32}
  parent: System
  definition: System.Action`2
  name: Action<T, Int32>
  nameWithType: Action<T, Int32>
  fullName: System.Action<T, System.Int32>
  nameWithType.vb: Action(Of T, Int32)
  fullName.vb: System.Action(Of T, System.Int32)
  name.vb: Action(Of T, Int32)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: g3.DVector`1.ApplyReplace*
  commentId: Overload:g3.DVector`1.ApplyReplace
  name: ApplyReplace
  nameWithType: DVector<T>.ApplyReplace
  fullName: g3.DVector<T>.ApplyReplace
  nameWithType.vb: DVector(Of T).ApplyReplace
  fullName.vb: g3.DVector(Of T).ApplyReplace
- uid: System.Func{{T},System.Int32,{T}}
  commentId: T:System.Func{`0,System.Int32,`0}
  parent: System
  definition: System.Func`3
  name: Func<T, Int32, T>
  nameWithType: Func<T, Int32, T>
  fullName: System.Func<T, System.Int32, T>
  nameWithType.vb: Func(Of T, Int32, T)
  fullName.vb: System.Func(Of T, System.Int32, T)
  name.vb: Func(Of T, Int32, T)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: g3.DVector`1.FastGetBuffer*
  commentId: Overload:g3.DVector`1.FastGetBuffer
  name: FastGetBuffer
  nameWithType: DVector<T>.FastGetBuffer
  fullName: g3.DVector<T>.FastGetBuffer
  nameWithType.vb: DVector(Of T).FastGetBuffer
  fullName.vb: g3.DVector(Of T).FastGetBuffer
- uid: g3.DVector{System.Double}
  commentId: T:g3.DVector{System.Double}
  parent: g3
  definition: g3.DVector`1
  name: DVector<Double>
  nameWithType: DVector<Double>
  fullName: g3.DVector<System.Double>
  nameWithType.vb: DVector(Of Double)
  fullName.vb: g3.DVector(Of System.Double)
  name.vb: DVector(Of Double)
  spec.csharp:
  - uid: g3.DVector`1
    name: DVector
    nameWithType: DVector
    fullName: g3.DVector
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: g3.DVector`1
    name: DVector
    nameWithType: DVector
    fullName: g3.DVector
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double*
  isExternal: true
  name: Double*
  nameWithType: Double*
  fullName: System.Double*
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: g3.DVector{System.Single}
  commentId: T:g3.DVector{System.Single}
  parent: g3
  definition: g3.DVector`1
  name: DVector<Single>
  nameWithType: DVector<Single>
  fullName: g3.DVector<System.Single>
  nameWithType.vb: DVector(Of Single)
  fullName.vb: g3.DVector(Of System.Single)
  name.vb: DVector(Of Single)
  spec.csharp:
  - uid: g3.DVector`1
    name: DVector
    nameWithType: DVector
    fullName: g3.DVector
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: g3.DVector`1
    name: DVector
    nameWithType: DVector
    fullName: g3.DVector
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single*
  isExternal: true
  name: Single*
  nameWithType: Single*
  fullName: System.Single*
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: g3.DVector{System.Int32}
  commentId: T:g3.DVector{System.Int32}
  parent: g3
  definition: g3.DVector`1
  name: DVector<Int32>
  nameWithType: DVector<Int32>
  fullName: g3.DVector<System.Int32>
  nameWithType.vb: DVector(Of Int32)
  fullName.vb: g3.DVector(Of System.Int32)
  name.vb: DVector(Of Int32)
  spec.csharp:
  - uid: g3.DVector`1
    name: DVector
    nameWithType: DVector
    fullName: g3.DVector
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: g3.DVector`1
    name: DVector
    nameWithType: DVector
    fullName: g3.DVector
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32*
  isExternal: true
  name: Int32*
  nameWithType: Int32*
  fullName: System.Int32*
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: g3.DVector`1.GetEnumerator*
  commentId: Overload:g3.DVector`1.GetEnumerator
  name: GetEnumerator
  nameWithType: DVector<T>.GetEnumerator
  fullName: g3.DVector<T>.GetEnumerator
  nameWithType.vb: DVector(Of T).GetEnumerator
  fullName.vb: g3.DVector(Of T).GetEnumerator
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: g3.DVector`1.BlockIterator*
  commentId: Overload:g3.DVector`1.BlockIterator
  name: BlockIterator
  nameWithType: DVector<T>.BlockIterator
  fullName: g3.DVector<T>.BlockIterator
  nameWithType.vb: DVector(Of T).BlockIterator
  fullName.vb: g3.DVector(Of T).BlockIterator
- uid: System.Collections.Generic.IEnumerable{g3.DVector`1.DBlock}
  commentId: T:System.Collections.Generic.IEnumerable{g3.DVector`1.DBlock}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DVector.DBlock<>>
  nameWithType: IEnumerable<DVector.DBlock<>>
  fullName: System.Collections.Generic.IEnumerable<g3.DVector.DBlock<>>
  nameWithType.vb: IEnumerable(Of DVector.DBlock(Of ))
  fullName.vb: System.Collections.Generic.IEnumerable(Of g3.DVector.DBlock(Of ))
  name.vb: IEnumerable(Of DVector.DBlock(Of ))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: g3.DVector`1.DBlock
    name: DVector.DBlock
    nameWithType: DVector.DBlock
    fullName: g3.DVector.DBlock
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: g3.DVector`1.DBlock
    name: DVector.DBlock
    nameWithType: DVector.DBlock
    fullName: g3.DVector.DBlock
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
