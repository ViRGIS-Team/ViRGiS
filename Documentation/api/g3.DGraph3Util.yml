### YamlMime:ManagedReference
items:
- uid: g3.DGraph3Util
  commentId: T:g3.DGraph3Util
  id: DGraph3Util
  parent: g3
  children:
  - g3.DGraph3Util.DisconnectJunction(g3.DGraph3,System.Int32,System.Double)
  - g3.DGraph3Util.ErodeOpenSpurs(g3.DGraph3)
  - g3.DGraph3Util.ExtractCurves(g3.DGraph3,System.Boolean,System.Func{System.Int32,System.Boolean})
  - g3.DGraph3Util.NextEdgeAndVtx(System.Int32,System.Int32,g3.DGraph3)
  - g3.DGraph3Util.WalkToNextNonRegularVtx(g3.DGraph3,System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: DGraph3Util
  nameWithType: DGraph3Util
  fullName: g3.DGraph3Util
  type: Class
  source:
    remote:
      path: Assets/geometry3Sharp/curve/DGraph3Util.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: DGraph3Util
    path: ../Assets/geometry3Sharp/curve/DGraph3Util.cs
    startLine: 12
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nUtility functions for DGraph3 data structure\n"
  example: []
  syntax:
    content: public static class DGraph3Util
    content.vb: Public Module DGraph3Util
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: g3.DGraph3Util.ExtractCurves(g3.DGraph3,System.Boolean,System.Func{System.Int32,System.Boolean})
  commentId: M:g3.DGraph3Util.ExtractCurves(g3.DGraph3,System.Boolean,System.Func{System.Int32,System.Boolean})
  id: ExtractCurves(g3.DGraph3,System.Boolean,System.Func{System.Int32,System.Boolean})
  parent: g3.DGraph3Util
  langs:
  - csharp
  - vb
  name: ExtractCurves(DGraph3, Boolean, Func<Int32, Boolean>)
  nameWithType: DGraph3Util.ExtractCurves(DGraph3, Boolean, Func<Int32, Boolean>)
  fullName: g3.DGraph3Util.ExtractCurves(g3.DGraph3, System.Boolean, System.Func<System.Int32, System.Boolean>)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/curve/DGraph3Util.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: ExtractCurves
    path: ../Assets/geometry3Sharp/curve/DGraph3Util.cs
    startLine: 30
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nDecompose graph into simple polylines and polygons. \n"
  example: []
  syntax:
    content: public static DGraph3Util.Curves ExtractCurves(DGraph3 graph, bool bWantLoopIndices = false, Func<int, bool> CurveOrientationF = null)
    parameters:
    - id: graph
      type: g3.DGraph3
    - id: bWantLoopIndices
      type: System.Boolean
    - id: CurveOrientationF
      type: System.Func{System.Int32,System.Boolean}
    return:
      type: g3.DGraph3Util.Curves
    content.vb: Public Shared Function ExtractCurves(graph As DGraph3, bWantLoopIndices As Boolean = False, CurveOrientationF As Func(Of Integer, Boolean) = Nothing) As DGraph3Util.Curves
  overload: g3.DGraph3Util.ExtractCurves*
  nameWithType.vb: DGraph3Util.ExtractCurves(DGraph3, Boolean, Func(Of Int32, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: g3.DGraph3Util.ExtractCurves(g3.DGraph3, System.Boolean, System.Func(Of System.Int32, System.Boolean))
  name.vb: ExtractCurves(DGraph3, Boolean, Func(Of Int32, Boolean))
- uid: g3.DGraph3Util.DisconnectJunction(g3.DGraph3,System.Int32,System.Double)
  commentId: M:g3.DGraph3Util.DisconnectJunction(g3.DGraph3,System.Int32,System.Double)
  id: DisconnectJunction(g3.DGraph3,System.Int32,System.Double)
  parent: g3.DGraph3Util
  langs:
  - csharp
  - vb
  name: DisconnectJunction(DGraph3, Int32, Double)
  nameWithType: DGraph3Util.DisconnectJunction(DGraph3, Int32, Double)
  fullName: g3.DGraph3Util.DisconnectJunction(g3.DGraph3, System.Int32, System.Double)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/curve/DGraph3Util.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: DisconnectJunction
    path: ../Assets/geometry3Sharp/curve/DGraph3Util.cs
    startLine: 212
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nforeach edge [vid,b] connected to junction vertex vid, remove, add new vertex c, \nand then add new edge [b,c]. Optionally move c a bit back along edge from vid.\n"
  example: []
  syntax:
    content: public static void DisconnectJunction(DGraph3 graph, int vid, double shrinkFactor = 1)
    parameters:
    - id: graph
      type: g3.DGraph3
    - id: vid
      type: System.Int32
    - id: shrinkFactor
      type: System.Double
    content.vb: Public Shared Sub DisconnectJunction(graph As DGraph3, vid As Integer, shrinkFactor As Double = 1)
  overload: g3.DGraph3Util.DisconnectJunction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: g3.DGraph3Util.NextEdgeAndVtx(System.Int32,System.Int32,g3.DGraph3)
  commentId: M:g3.DGraph3Util.NextEdgeAndVtx(System.Int32,System.Int32,g3.DGraph3)
  id: NextEdgeAndVtx(System.Int32,System.Int32,g3.DGraph3)
  parent: g3.DGraph3Util
  langs:
  - csharp
  - vb
  name: NextEdgeAndVtx(Int32, Int32, DGraph3)
  nameWithType: DGraph3Util.NextEdgeAndVtx(Int32, Int32, DGraph3)
  fullName: g3.DGraph3Util.NextEdgeAndVtx(System.Int32, System.Int32, g3.DGraph3)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/curve/DGraph3Util.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: NextEdgeAndVtx
    path: ../Assets/geometry3Sharp/curve/DGraph3Util.cs
    startLine: 234
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nIf we are at edge eid, which as one vertex prev_vid, find &apos;other&apos; vertex, and other edge connected to that vertex,\nand return pair [next_edge, shared_vtx]\nReturns [int.MaxValue, shared_vtx] if shared_vtx is not valence=2   (ie stops at boundaries and complex junctions)\n"
  example: []
  syntax:
    content: public static Index2i NextEdgeAndVtx(int eid, int prev_vid, DGraph3 graph)
    parameters:
    - id: eid
      type: System.Int32
    - id: prev_vid
      type: System.Int32
    - id: graph
      type: g3.DGraph3
    return:
      type: g3.Index2i
    content.vb: Public Shared Function NextEdgeAndVtx(eid As Integer, prev_vid As Integer, graph As DGraph3) As Index2i
  overload: g3.DGraph3Util.NextEdgeAndVtx*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: g3.DGraph3Util.WalkToNextNonRegularVtx(g3.DGraph3,System.Int32,System.Int32)
  commentId: M:g3.DGraph3Util.WalkToNextNonRegularVtx(g3.DGraph3,System.Int32,System.Int32)
  id: WalkToNextNonRegularVtx(g3.DGraph3,System.Int32,System.Int32)
  parent: g3.DGraph3Util
  langs:
  - csharp
  - vb
  name: WalkToNextNonRegularVtx(DGraph3, Int32, Int32)
  nameWithType: DGraph3Util.WalkToNextNonRegularVtx(DGraph3, Int32, Int32)
  fullName: g3.DGraph3Util.WalkToNextNonRegularVtx(g3.DGraph3, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/curve/DGraph3Util.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: WalkToNextNonRegularVtx
    path: ../Assets/geometry3Sharp/curve/DGraph3Util.cs
    startLine: 257
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nwalk through graph from fromVtx, in direction of eid, until we hit the next junction vertex\n"
  example: []
  syntax:
    content: public static List<int> WalkToNextNonRegularVtx(DGraph3 graph, int fromVtx, int eid)
    parameters:
    - id: graph
      type: g3.DGraph3
    - id: fromVtx
      type: System.Int32
    - id: eid
      type: System.Int32
    return:
      type: System.Collections.Generic.List{System.Int32}
    content.vb: Public Shared Function WalkToNextNonRegularVtx(graph As DGraph3, fromVtx As Integer, eid As Integer) As List(Of Integer)
  overload: g3.DGraph3Util.WalkToNextNonRegularVtx*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: g3.DGraph3Util.ErodeOpenSpurs(g3.DGraph3)
  commentId: M:g3.DGraph3Util.ErodeOpenSpurs(g3.DGraph3)
  id: ErodeOpenSpurs(g3.DGraph3)
  parent: g3.DGraph3Util
  langs:
  - csharp
  - vb
  name: ErodeOpenSpurs(DGraph3)
  nameWithType: DGraph3Util.ErodeOpenSpurs(DGraph3)
  fullName: g3.DGraph3Util.ErodeOpenSpurs(g3.DGraph3)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/curve/DGraph3Util.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: ErodeOpenSpurs
    path: ../Assets/geometry3Sharp/curve/DGraph3Util.cs
    startLine: 292
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nErode inwards from open boundary vertices of graph (ie vtx with single edge).\nResulting graph is not compact (!)\n"
  example: []
  syntax:
    content: public static void ErodeOpenSpurs(DGraph3 graph)
    parameters:
    - id: graph
      type: g3.DGraph3
    content.vb: Public Shared Sub ErodeOpenSpurs(graph As DGraph3)
  overload: g3.DGraph3Util.ErodeOpenSpurs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: g3
  commentId: N:g3
  name: g3
  nameWithType: g3
  fullName: g3
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: g3.DGraph3Util.ExtractCurves*
  commentId: Overload:g3.DGraph3Util.ExtractCurves
  name: ExtractCurves
  nameWithType: DGraph3Util.ExtractCurves
  fullName: g3.DGraph3Util.ExtractCurves
- uid: g3.DGraph3
  commentId: T:g3.DGraph3
  parent: g3
  name: DGraph3
  nameWithType: DGraph3
  fullName: g3.DGraph3
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Func{System.Int32,System.Boolean}
  commentId: T:System.Func{System.Int32,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Int32, Boolean>
  nameWithType: Func<Int32, Boolean>
  fullName: System.Func<System.Int32, System.Boolean>
  nameWithType.vb: Func(Of Int32, Boolean)
  fullName.vb: System.Func(Of System.Int32, System.Boolean)
  name.vb: Func(Of Int32, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: g3.DGraph3Util.Curves
  commentId: T:g3.DGraph3Util.Curves
  parent: g3
  name: DGraph3Util.Curves
  nameWithType: DGraph3Util.Curves
  fullName: g3.DGraph3Util.Curves
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: g3.DGraph3Util.DisconnectJunction*
  commentId: Overload:g3.DGraph3Util.DisconnectJunction
  name: DisconnectJunction
  nameWithType: DGraph3Util.DisconnectJunction
  fullName: g3.DGraph3Util.DisconnectJunction
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: g3.DGraph3Util.NextEdgeAndVtx*
  commentId: Overload:g3.DGraph3Util.NextEdgeAndVtx
  name: NextEdgeAndVtx
  nameWithType: DGraph3Util.NextEdgeAndVtx
  fullName: g3.DGraph3Util.NextEdgeAndVtx
- uid: g3.Index2i
  commentId: T:g3.Index2i
  parent: g3
  name: Index2i
  nameWithType: Index2i
  fullName: g3.Index2i
- uid: g3.DGraph3Util.WalkToNextNonRegularVtx*
  commentId: Overload:g3.DGraph3Util.WalkToNextNonRegularVtx
  name: WalkToNextNonRegularVtx
  nameWithType: DGraph3Util.WalkToNextNonRegularVtx
  fullName: g3.DGraph3Util.WalkToNextNonRegularVtx
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: g3.DGraph3Util.ErodeOpenSpurs*
  commentId: Overload:g3.DGraph3Util.ErodeOpenSpurs
  name: ErodeOpenSpurs
  nameWithType: DGraph3Util.ErodeOpenSpurs
  fullName: g3.DGraph3Util.ErodeOpenSpurs
