### YamlMime:ManagedReference
items:
- uid: g3.DGraph2Util
  commentId: T:g3.DGraph2Util
  id: DGraph2Util
  parent: g3
  children:
  - g3.DGraph2Util.ChainOpenPaths(g3.DGraph2Util.Curves,System.Double)
  - g3.DGraph2Util.DisconnectJunction(g3.DGraph2,System.Int32,System.Double)
  - g3.DGraph2Util.DisconnectJunctions(g3.DGraph2)
  - g3.DGraph2Util.ExtractCurves(g3.DGraph2)
  - g3.DGraph2Util.FindRayIntersection(g3.Vector2d,g3.Vector2d,System.Int32@,System.Double@,g3.DGraph2)
  - g3.DGraph2Util.NextEdgeAndVtx(System.Int32,System.Int32,g3.DGraph2)
  - g3.DGraph2Util.PathLength(g3.DGraph2,System.Collections.Generic.IList{System.Int32})
  - g3.DGraph2Util.VertexLaplacian(g3.DGraph2,System.Int32,System.Boolean@)
  - g3.DGraph2Util.WalkToNextNonRegularVtx(g3.DGraph2,System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: DGraph2Util
  nameWithType: DGraph2Util
  fullName: g3.DGraph2Util
  type: Class
  source:
    remote:
      path: Assets/geometry3Sharp/curve/DGraph2Util.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: DGraph2Util
    path: ../Assets/geometry3Sharp/curve/DGraph2Util.cs
    startLine: 12
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nUtility functions for DGraph2 data structure\n"
  example: []
  syntax:
    content: public static class DGraph2Util
    content.vb: Public Module DGraph2Util
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: g3.DGraph2Util.ExtractCurves(g3.DGraph2)
  commentId: M:g3.DGraph2Util.ExtractCurves(g3.DGraph2)
  id: ExtractCurves(g3.DGraph2)
  parent: g3.DGraph2Util
  langs:
  - csharp
  - vb
  name: ExtractCurves(DGraph2)
  nameWithType: DGraph2Util.ExtractCurves(DGraph2)
  fullName: g3.DGraph2Util.ExtractCurves(g3.DGraph2)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/curve/DGraph2Util.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: ExtractCurves
    path: ../Assets/geometry3Sharp/curve/DGraph2Util.cs
    startLine: 26
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nDecompose graph into simple polylines and polygons. \n"
  example: []
  syntax:
    content: public static DGraph2Util.Curves ExtractCurves(DGraph2 graph)
    parameters:
    - id: graph
      type: g3.DGraph2
    return:
      type: g3.DGraph2Util.Curves
    content.vb: Public Shared Function ExtractCurves(graph As DGraph2) As DGraph2Util.Curves
  overload: g3.DGraph2Util.ExtractCurves*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: g3.DGraph2Util.ChainOpenPaths(g3.DGraph2Util.Curves,System.Double)
  commentId: M:g3.DGraph2Util.ChainOpenPaths(g3.DGraph2Util.Curves,System.Double)
  id: ChainOpenPaths(g3.DGraph2Util.Curves,System.Double)
  parent: g3.DGraph2Util
  langs:
  - csharp
  - vb
  name: ChainOpenPaths(DGraph2Util.Curves, Double)
  nameWithType: DGraph2Util.ChainOpenPaths(DGraph2Util.Curves, Double)
  fullName: g3.DGraph2Util.ChainOpenPaths(g3.DGraph2Util.Curves, System.Double)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/curve/DGraph2Util.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: ChainOpenPaths
    path: ../Assets/geometry3Sharp/curve/DGraph2Util.cs
    startLine: 140
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nmerge members of c.Paths that have unique endpoint pairings.\nDoes *not* extract closed loops that contain junction vertices,\nunless the &apos;other&apos; end of those junctions is dangling.\nAlso, horribly innefficient!\n"
  example: []
  syntax:
    content: public static void ChainOpenPaths(DGraph2Util.Curves c, double epsilon = 2.2204460492503131E-16)
    parameters:
    - id: c
      type: g3.DGraph2Util.Curves
    - id: epsilon
      type: System.Double
    content.vb: Public Shared Sub ChainOpenPaths(c As DGraph2Util.Curves, epsilon As Double = 2.2204460492503131E-16)
  overload: g3.DGraph2Util.ChainOpenPaths*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: g3.DGraph2Util.DisconnectJunctions(g3.DGraph2)
  commentId: M:g3.DGraph2Util.DisconnectJunctions(g3.DGraph2)
  id: DisconnectJunctions(g3.DGraph2)
  parent: g3.DGraph2Util
  langs:
  - csharp
  - vb
  name: DisconnectJunctions(DGraph2)
  nameWithType: DGraph2Util.DisconnectJunctions(DGraph2)
  fullName: g3.DGraph2Util.DisconnectJunctions(g3.DGraph2)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/curve/DGraph2Util.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: DisconnectJunctions
    path: ../Assets/geometry3Sharp/curve/DGraph2Util.cs
    startLine: 281
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nFind and remove any junction (ie valence>2) vertices of the graph.\nAt a junction, the pair of best-aligned (ie straightest) edges are left \nconnected, and all the other edges are disconnected\n\n[TODO] currently there is no DGraph2.SetEdge(), so the &apos;other&apos; edges\nare deleted and new edges inserted. Hence, edge IDs are not preserved.\n"
  example: []
  syntax:
    content: public static int DisconnectJunctions(DGraph2 graph)
    parameters:
    - id: graph
      type: g3.DGraph2
    return:
      type: System.Int32
    content.vb: Public Shared Function DisconnectJunctions(graph As DGraph2) As Integer
  overload: g3.DGraph2Util.DisconnectJunctions*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: g3.DGraph2Util.DisconnectJunction(g3.DGraph2,System.Int32,System.Double)
  commentId: M:g3.DGraph2Util.DisconnectJunction(g3.DGraph2,System.Int32,System.Double)
  id: DisconnectJunction(g3.DGraph2,System.Int32,System.Double)
  parent: g3.DGraph2Util
  langs:
  - csharp
  - vb
  name: DisconnectJunction(DGraph2, Int32, Double)
  nameWithType: DGraph2Util.DisconnectJunction(DGraph2, Int32, Double)
  fullName: g3.DGraph2Util.DisconnectJunction(g3.DGraph2, System.Int32, System.Double)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/curve/DGraph2Util.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: DisconnectJunction
    path: ../Assets/geometry3Sharp/curve/DGraph2Util.cs
    startLine: 335
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nforeach edge [vid,b] connected to junction vertex vid, remove, add new vertex c, \nand then add new edge [b,c]. Optionally move c a bit back along edge from vid.\n"
  example: []
  syntax:
    content: public static void DisconnectJunction(DGraph2 graph, int vid, double shrinkFactor = 1)
    parameters:
    - id: graph
      type: g3.DGraph2
    - id: vid
      type: System.Int32
    - id: shrinkFactor
      type: System.Double
    content.vb: Public Shared Sub DisconnectJunction(graph As DGraph2, vid As Integer, shrinkFactor As Double = 1)
  overload: g3.DGraph2Util.DisconnectJunction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: g3.DGraph2Util.VertexLaplacian(g3.DGraph2,System.Int32,System.Boolean@)
  commentId: M:g3.DGraph2Util.VertexLaplacian(g3.DGraph2,System.Int32,System.Boolean@)
  id: VertexLaplacian(g3.DGraph2,System.Int32,System.Boolean@)
  parent: g3.DGraph2Util
  langs:
  - csharp
  - vb
  name: VertexLaplacian(DGraph2, Int32, out Boolean)
  nameWithType: DGraph2Util.VertexLaplacian(DGraph2, Int32, out Boolean)
  fullName: g3.DGraph2Util.VertexLaplacian(g3.DGraph2, System.Int32, out System.Boolean)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/curve/DGraph2Util.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: VertexLaplacian
    path: ../Assets/geometry3Sharp/curve/DGraph2Util.cs
    startLine: 357
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nIf vid has two or more neighbours, returns uniform laplacian, otherwise returns vid position\n"
  example: []
  syntax:
    content: public static Vector2d VertexLaplacian(DGraph2 graph, int vid, out bool isValid)
    parameters:
    - id: graph
      type: g3.DGraph2
    - id: vid
      type: System.Int32
    - id: isValid
      type: System.Boolean
    return:
      type: g3.Vector2d
    content.vb: Public Shared Function VertexLaplacian(graph As DGraph2, vid As Integer, ByRef isValid As Boolean) As Vector2d
  overload: g3.DGraph2Util.VertexLaplacian*
  nameWithType.vb: DGraph2Util.VertexLaplacian(DGraph2, Int32, ByRef Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: g3.DGraph2Util.VertexLaplacian(g3.DGraph2, System.Int32, ByRef System.Boolean)
  name.vb: VertexLaplacian(DGraph2, Int32, ByRef Boolean)
- uid: g3.DGraph2Util.FindRayIntersection(g3.Vector2d,g3.Vector2d,System.Int32@,System.Double@,g3.DGraph2)
  commentId: M:g3.DGraph2Util.FindRayIntersection(g3.Vector2d,g3.Vector2d,System.Int32@,System.Double@,g3.DGraph2)
  id: FindRayIntersection(g3.Vector2d,g3.Vector2d,System.Int32@,System.Double@,g3.DGraph2)
  parent: g3.DGraph2Util
  langs:
  - csharp
  - vb
  name: FindRayIntersection(Vector2d, Vector2d, out Int32, out Double, DGraph2)
  nameWithType: DGraph2Util.FindRayIntersection(Vector2d, Vector2d, out Int32, out Double, DGraph2)
  fullName: g3.DGraph2Util.FindRayIntersection(g3.Vector2d, g3.Vector2d, out System.Int32, out System.Double, g3.DGraph2)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/curve/DGraph2Util.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: FindRayIntersection
    path: ../Assets/geometry3Sharp/curve/DGraph2Util.cs
    startLine: 379
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public static bool FindRayIntersection(Vector2d o, Vector2d d, out int hit_eid, out double hit_ray_t, DGraph2 graph)
    parameters:
    - id: o
      type: g3.Vector2d
    - id: d
      type: g3.Vector2d
    - id: hit_eid
      type: System.Int32
    - id: hit_ray_t
      type: System.Double
    - id: graph
      type: g3.DGraph2
    return:
      type: System.Boolean
    content.vb: Public Shared Function FindRayIntersection(o As Vector2d, d As Vector2d, ByRef hit_eid As Integer, ByRef hit_ray_t As Double, graph As DGraph2) As Boolean
  overload: g3.DGraph2Util.FindRayIntersection*
  nameWithType.vb: DGraph2Util.FindRayIntersection(Vector2d, Vector2d, ByRef Int32, ByRef Double, DGraph2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: g3.DGraph2Util.FindRayIntersection(g3.Vector2d, g3.Vector2d, ByRef System.Int32, ByRef System.Double, g3.DGraph2)
  name.vb: FindRayIntersection(Vector2d, Vector2d, ByRef Int32, ByRef Double, DGraph2)
- uid: g3.DGraph2Util.NextEdgeAndVtx(System.Int32,System.Int32,g3.DGraph2)
  commentId: M:g3.DGraph2Util.NextEdgeAndVtx(System.Int32,System.Int32,g3.DGraph2)
  id: NextEdgeAndVtx(System.Int32,System.Int32,g3.DGraph2)
  parent: g3.DGraph2Util
  langs:
  - csharp
  - vb
  name: NextEdgeAndVtx(Int32, Int32, DGraph2)
  nameWithType: DGraph2Util.NextEdgeAndVtx(Int32, Int32, DGraph2)
  fullName: g3.DGraph2Util.NextEdgeAndVtx(System.Int32, System.Int32, g3.DGraph2)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/curve/DGraph2Util.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: NextEdgeAndVtx
    path: ../Assets/geometry3Sharp/curve/DGraph2Util.cs
    startLine: 412
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nIf we are at edge eid, which as one vertex prev_vid, find &apos;other&apos; vertex, and other edge connected to that vertex,\nand return pair [next_edge, shared_vtx]\nReturns [int.MaxValue, shared_vtx] if shared_vtx is not valence=2   (ie stops at boundaries and complex junctions)\n"
  example: []
  syntax:
    content: public static Index2i NextEdgeAndVtx(int eid, int prev_vid, DGraph2 graph)
    parameters:
    - id: eid
      type: System.Int32
    - id: prev_vid
      type: System.Int32
    - id: graph
      type: g3.DGraph2
    return:
      type: g3.Index2i
    content.vb: Public Shared Function NextEdgeAndVtx(eid As Integer, prev_vid As Integer, graph As DGraph2) As Index2i
  overload: g3.DGraph2Util.NextEdgeAndVtx*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: g3.DGraph2Util.WalkToNextNonRegularVtx(g3.DGraph2,System.Int32,System.Int32)
  commentId: M:g3.DGraph2Util.WalkToNextNonRegularVtx(g3.DGraph2,System.Int32,System.Int32)
  id: WalkToNextNonRegularVtx(g3.DGraph2,System.Int32,System.Int32)
  parent: g3.DGraph2Util
  langs:
  - csharp
  - vb
  name: WalkToNextNonRegularVtx(DGraph2, Int32, Int32)
  nameWithType: DGraph2Util.WalkToNextNonRegularVtx(DGraph2, Int32, Int32)
  fullName: g3.DGraph2Util.WalkToNextNonRegularVtx(g3.DGraph2, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/curve/DGraph2Util.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: WalkToNextNonRegularVtx
    path: ../Assets/geometry3Sharp/curve/DGraph2Util.cs
    startLine: 435
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nwalk through graph from fromVtx, in direction of eid, until we hit the next junction vertex\n"
  example: []
  syntax:
    content: public static List<int> WalkToNextNonRegularVtx(DGraph2 graph, int fromVtx, int eid)
    parameters:
    - id: graph
      type: g3.DGraph2
    - id: fromVtx
      type: System.Int32
    - id: eid
      type: System.Int32
    return:
      type: System.Collections.Generic.List{System.Int32}
    content.vb: Public Shared Function WalkToNextNonRegularVtx(graph As DGraph2, fromVtx As Integer, eid As Integer) As List(Of Integer)
  overload: g3.DGraph2Util.WalkToNextNonRegularVtx*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: g3.DGraph2Util.PathLength(g3.DGraph2,System.Collections.Generic.IList{System.Int32})
  commentId: M:g3.DGraph2Util.PathLength(g3.DGraph2,System.Collections.Generic.IList{System.Int32})
  id: PathLength(g3.DGraph2,System.Collections.Generic.IList{System.Int32})
  parent: g3.DGraph2Util
  langs:
  - csharp
  - vb
  name: PathLength(DGraph2, IList<Int32>)
  nameWithType: DGraph2Util.PathLength(DGraph2, IList<Int32>)
  fullName: g3.DGraph2Util.PathLength(g3.DGraph2, System.Collections.Generic.IList<System.Int32>)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/curve/DGraph2Util.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: PathLength
    path: ../Assets/geometry3Sharp/curve/DGraph2Util.cs
    startLine: 469
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\ncompute length of path through graph\n"
  example: []
  syntax:
    content: public static double PathLength(DGraph2 graph, IList<int> pathVertices)
    parameters:
    - id: graph
      type: g3.DGraph2
    - id: pathVertices
      type: System.Collections.Generic.IList{System.Int32}
    return:
      type: System.Double
    content.vb: Public Shared Function PathLength(graph As DGraph2, pathVertices As IList(Of Integer)) As Double
  overload: g3.DGraph2Util.PathLength*
  nameWithType.vb: DGraph2Util.PathLength(DGraph2, IList(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: g3.DGraph2Util.PathLength(g3.DGraph2, System.Collections.Generic.IList(Of System.Int32))
  name.vb: PathLength(DGraph2, IList(Of Int32))
references:
- uid: g3
  commentId: N:g3
  name: g3
  nameWithType: g3
  fullName: g3
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: g3.DGraph2Util.ExtractCurves*
  commentId: Overload:g3.DGraph2Util.ExtractCurves
  name: ExtractCurves
  nameWithType: DGraph2Util.ExtractCurves
  fullName: g3.DGraph2Util.ExtractCurves
- uid: g3.DGraph2
  commentId: T:g3.DGraph2
  parent: g3
  name: DGraph2
  nameWithType: DGraph2
  fullName: g3.DGraph2
- uid: g3.DGraph2Util.Curves
  commentId: T:g3.DGraph2Util.Curves
  parent: g3
  name: DGraph2Util.Curves
  nameWithType: DGraph2Util.Curves
  fullName: g3.DGraph2Util.Curves
- uid: g3.DGraph2Util.ChainOpenPaths*
  commentId: Overload:g3.DGraph2Util.ChainOpenPaths
  name: ChainOpenPaths
  nameWithType: DGraph2Util.ChainOpenPaths
  fullName: g3.DGraph2Util.ChainOpenPaths
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: g3.DGraph2Util.DisconnectJunctions*
  commentId: Overload:g3.DGraph2Util.DisconnectJunctions
  name: DisconnectJunctions
  nameWithType: DGraph2Util.DisconnectJunctions
  fullName: g3.DGraph2Util.DisconnectJunctions
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: g3.DGraph2Util.DisconnectJunction*
  commentId: Overload:g3.DGraph2Util.DisconnectJunction
  name: DisconnectJunction
  nameWithType: DGraph2Util.DisconnectJunction
  fullName: g3.DGraph2Util.DisconnectJunction
- uid: g3.DGraph2Util.VertexLaplacian*
  commentId: Overload:g3.DGraph2Util.VertexLaplacian
  name: VertexLaplacian
  nameWithType: DGraph2Util.VertexLaplacian
  fullName: g3.DGraph2Util.VertexLaplacian
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: g3.Vector2d
  commentId: T:g3.Vector2d
  parent: g3
  name: Vector2d
  nameWithType: Vector2d
  fullName: g3.Vector2d
- uid: g3.DGraph2Util.FindRayIntersection*
  commentId: Overload:g3.DGraph2Util.FindRayIntersection
  name: FindRayIntersection
  nameWithType: DGraph2Util.FindRayIntersection
  fullName: g3.DGraph2Util.FindRayIntersection
- uid: g3.DGraph2Util.NextEdgeAndVtx*
  commentId: Overload:g3.DGraph2Util.NextEdgeAndVtx
  name: NextEdgeAndVtx
  nameWithType: DGraph2Util.NextEdgeAndVtx
  fullName: g3.DGraph2Util.NextEdgeAndVtx
- uid: g3.Index2i
  commentId: T:g3.Index2i
  parent: g3
  name: Index2i
  nameWithType: Index2i
  fullName: g3.Index2i
- uid: g3.DGraph2Util.WalkToNextNonRegularVtx*
  commentId: Overload:g3.DGraph2Util.WalkToNextNonRegularVtx
  name: WalkToNextNonRegularVtx
  nameWithType: DGraph2Util.WalkToNextNonRegularVtx
  fullName: g3.DGraph2Util.WalkToNextNonRegularVtx
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: g3.DGraph2Util.PathLength*
  commentId: Overload:g3.DGraph2Util.PathLength
  name: PathLength
  nameWithType: DGraph2Util.PathLength
  fullName: g3.DGraph2Util.PathLength
- uid: System.Collections.Generic.IList{System.Int32}
  commentId: T:System.Collections.Generic.IList{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Int32>
  nameWithType: IList<Int32>
  fullName: System.Collections.Generic.IList<System.Int32>
  nameWithType.vb: IList(Of Int32)
  fullName.vb: System.Collections.Generic.IList(Of System.Int32)
  name.vb: IList(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
