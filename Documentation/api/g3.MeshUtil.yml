### YamlMime:ManagedReference
items:
- uid: g3.MeshUtil
  commentId: T:g3.MeshUtil
  id: MeshUtil
  parent: g3
  children:
  - g3.MeshUtil.CheckIfCollapseCreatesFlip(g3.DMesh3,System.Int32,g3.Vector3d)
  - g3.MeshUtil.CheckIfEdgeFlipCreatesFlip(g3.DMesh3,System.Int32,System.Double)
  - g3.MeshUtil.CotanSmooth(g3.DMesh3,System.Int32,System.Double)
  - g3.MeshUtil.DiscreteGaussCurvature(g3.DMesh3,System.Int32)
  - g3.MeshUtil.ExtractLoopV(g3.IMesh,System.Collections.Generic.IEnumerable{System.Int32})
  - g3.MeshUtil.ExtractLoopV(g3.IMesh,System.Int32[])
  - g3.MeshUtil.GetEdgeFlipNormals(g3.DMesh3,System.Int32,g3.Vector3d@,g3.Vector3d@,g3.Vector3d@,g3.Vector3d@)
  - g3.MeshUtil.GetEdgeFlipTris(g3.DMesh3,System.Int32,g3.Index3i@,g3.Index3i@,g3.Index3i@,g3.Index3i@)
  - g3.MeshUtil.MeanValueSmooth(g3.DMesh3,System.Int32,System.Double)
  - g3.MeshUtil.OpeningAngleD(g3.DMesh3,System.Int32)
  - g3.MeshUtil.ScaleMesh(g3.DMesh3,g3.Frame3f,g3.Vector3f)
  - g3.MeshUtil.UniformSmooth(g3.DMesh3,System.Int32,System.Double)
  langs:
  - csharp
  - vb
  name: MeshUtil
  nameWithType: MeshUtil
  fullName: g3.MeshUtil
  type: Class
  source:
    remote:
      path: Assets/geometry3Sharp/mesh/MeshUtil.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: MeshUtil
    path: ../Assets/geometry3Sharp/mesh/MeshUtil.cs
    startLine: 5
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public static class MeshUtil
    content.vb: Public Module MeshUtil
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: g3.MeshUtil.UniformSmooth(g3.DMesh3,System.Int32,System.Double)
  commentId: M:g3.MeshUtil.UniformSmooth(g3.DMesh3,System.Int32,System.Double)
  id: UniformSmooth(g3.DMesh3,System.Int32,System.Double)
  parent: g3.MeshUtil
  langs:
  - csharp
  - vb
  name: UniformSmooth(DMesh3, Int32, Double)
  nameWithType: MeshUtil.UniformSmooth(DMesh3, Int32, Double)
  fullName: g3.MeshUtil.UniformSmooth(g3.DMesh3, System.Int32, System.Double)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/mesh/MeshUtil.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: UniformSmooth
    path: ../Assets/geometry3Sharp/mesh/MeshUtil.cs
    startLine: 12
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public static Vector3d UniformSmooth(DMesh3 mesh, int vID, double t)
    parameters:
    - id: mesh
      type: g3.DMesh3
    - id: vID
      type: System.Int32
    - id: t
      type: System.Double
    return:
      type: g3.Vector3d
    content.vb: Public Shared Function UniformSmooth(mesh As DMesh3, vID As Integer, t As Double) As Vector3d
  overload: g3.MeshUtil.UniformSmooth*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: g3.MeshUtil.MeanValueSmooth(g3.DMesh3,System.Int32,System.Double)
  commentId: M:g3.MeshUtil.MeanValueSmooth(g3.DMesh3,System.Int32,System.Double)
  id: MeanValueSmooth(g3.DMesh3,System.Int32,System.Double)
  parent: g3.MeshUtil
  langs:
  - csharp
  - vb
  name: MeanValueSmooth(DMesh3, Int32, Double)
  nameWithType: MeshUtil.MeanValueSmooth(DMesh3, Int32, Double)
  fullName: g3.MeshUtil.MeanValueSmooth(g3.DMesh3, System.Int32, System.Double)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/mesh/MeshUtil.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: MeanValueSmooth
    path: ../Assets/geometry3Sharp/mesh/MeshUtil.cs
    startLine: 27
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public static Vector3d MeanValueSmooth(DMesh3 mesh, int vID, double t)
    parameters:
    - id: mesh
      type: g3.DMesh3
    - id: vID
      type: System.Int32
    - id: t
      type: System.Double
    return:
      type: g3.Vector3d
    content.vb: Public Shared Function MeanValueSmooth(mesh As DMesh3, vID As Integer, t As Double) As Vector3d
  overload: g3.MeshUtil.MeanValueSmooth*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: g3.MeshUtil.CotanSmooth(g3.DMesh3,System.Int32,System.Double)
  commentId: M:g3.MeshUtil.CotanSmooth(g3.DMesh3,System.Int32,System.Double)
  id: CotanSmooth(g3.DMesh3,System.Int32,System.Double)
  parent: g3.MeshUtil
  langs:
  - csharp
  - vb
  name: CotanSmooth(DMesh3, Int32, Double)
  nameWithType: MeshUtil.CotanSmooth(DMesh3, Int32, Double)
  fullName: g3.MeshUtil.CotanSmooth(g3.DMesh3, System.Int32, System.Double)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/mesh/MeshUtil.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: CotanSmooth
    path: ../Assets/geometry3Sharp/mesh/MeshUtil.cs
    startLine: 35
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public static Vector3d CotanSmooth(DMesh3 mesh, int vID, double t)
    parameters:
    - id: mesh
      type: g3.DMesh3
    - id: vID
      type: System.Int32
    - id: t
      type: System.Double
    return:
      type: g3.Vector3d
    content.vb: Public Shared Function CotanSmooth(mesh As DMesh3, vID As Integer, t As Double) As Vector3d
  overload: g3.MeshUtil.CotanSmooth*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: g3.MeshUtil.ScaleMesh(g3.DMesh3,g3.Frame3f,g3.Vector3f)
  commentId: M:g3.MeshUtil.ScaleMesh(g3.DMesh3,g3.Frame3f,g3.Vector3f)
  id: ScaleMesh(g3.DMesh3,g3.Frame3f,g3.Vector3f)
  parent: g3.MeshUtil
  langs:
  - csharp
  - vb
  name: ScaleMesh(DMesh3, Frame3f, Vector3f)
  nameWithType: MeshUtil.ScaleMesh(DMesh3, Frame3f, Vector3f)
  fullName: g3.MeshUtil.ScaleMesh(g3.DMesh3, g3.Frame3f, g3.Vector3f)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/mesh/MeshUtil.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: ScaleMesh
    path: ../Assets/geometry3Sharp/mesh/MeshUtil.cs
    startLine: 43
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public static void ScaleMesh(DMesh3 mesh, Frame3f f, Vector3f vScale)
    parameters:
    - id: mesh
      type: g3.DMesh3
    - id: f
      type: g3.Frame3f
    - id: vScale
      type: g3.Vector3f
    content.vb: Public Shared Sub ScaleMesh(mesh As DMesh3, f As Frame3f, vScale As Vector3f)
  overload: g3.MeshUtil.ScaleMesh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: g3.MeshUtil.OpeningAngleD(g3.DMesh3,System.Int32)
  commentId: M:g3.MeshUtil.OpeningAngleD(g3.DMesh3,System.Int32)
  id: OpeningAngleD(g3.DMesh3,System.Int32)
  parent: g3.MeshUtil
  langs:
  - csharp
  - vb
  name: OpeningAngleD(DMesh3, Int32)
  nameWithType: MeshUtil.OpeningAngleD(DMesh3, Int32)
  fullName: g3.MeshUtil.OpeningAngleD(g3.DMesh3, System.Int32)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/mesh/MeshUtil.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: OpeningAngleD
    path: ../Assets/geometry3Sharp/mesh/MeshUtil.cs
    startLine: 59
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\ncomputes opening angle between the two triangles connected to edge\n"
  example: []
  syntax:
    content: public static double OpeningAngleD(DMesh3 mesh, int eid)
    parameters:
    - id: mesh
      type: g3.DMesh3
    - id: eid
      type: System.Int32
    return:
      type: System.Double
    content.vb: Public Shared Function OpeningAngleD(mesh As DMesh3, eid As Integer) As Double
  overload: g3.MeshUtil.OpeningAngleD*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: g3.MeshUtil.DiscreteGaussCurvature(g3.DMesh3,System.Int32)
  commentId: M:g3.MeshUtil.DiscreteGaussCurvature(g3.DMesh3,System.Int32)
  id: DiscreteGaussCurvature(g3.DMesh3,System.Int32)
  parent: g3.MeshUtil
  langs:
  - csharp
  - vb
  name: DiscreteGaussCurvature(DMesh3, Int32)
  nameWithType: MeshUtil.DiscreteGaussCurvature(DMesh3, Int32)
  fullName: g3.MeshUtil.DiscreteGaussCurvature(g3.DMesh3, System.Int32)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/mesh/MeshUtil.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: DiscreteGaussCurvature
    path: ../Assets/geometry3Sharp/mesh/MeshUtil.cs
    startLine: 75
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\ncomputes sum of opening-angles in triangles around vid, minus 2pi.\nThis is zero on flat areas.\n"
  example: []
  syntax:
    content: public static double DiscreteGaussCurvature(DMesh3 mesh, int vid)
    parameters:
    - id: mesh
      type: g3.DMesh3
    - id: vid
      type: System.Int32
    return:
      type: System.Double
    content.vb: Public Shared Function DiscreteGaussCurvature(mesh As DMesh3, vid As Integer) As Double
  overload: g3.MeshUtil.DiscreteGaussCurvature*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: g3.MeshUtil.CheckIfCollapseCreatesFlip(g3.DMesh3,System.Int32,g3.Vector3d)
  commentId: M:g3.MeshUtil.CheckIfCollapseCreatesFlip(g3.DMesh3,System.Int32,g3.Vector3d)
  id: CheckIfCollapseCreatesFlip(g3.DMesh3,System.Int32,g3.Vector3d)
  parent: g3.MeshUtil
  langs:
  - csharp
  - vb
  name: CheckIfCollapseCreatesFlip(DMesh3, Int32, Vector3d)
  nameWithType: MeshUtil.CheckIfCollapseCreatesFlip(DMesh3, Int32, Vector3d)
  fullName: g3.MeshUtil.CheckIfCollapseCreatesFlip(g3.DMesh3, System.Int32, g3.Vector3d)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/mesh/MeshUtil.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: CheckIfCollapseCreatesFlip
    path: ../Assets/geometry3Sharp/mesh/MeshUtil.cs
    startLine: 92
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nCheck if collapsing edge edgeID to point newv will flip normal of any attached face\n"
  example: []
  syntax:
    content: public static bool CheckIfCollapseCreatesFlip(DMesh3 mesh, int edgeID, Vector3d newv)
    parameters:
    - id: mesh
      type: g3.DMesh3
    - id: edgeID
      type: System.Int32
    - id: newv
      type: g3.Vector3d
    return:
      type: System.Boolean
    content.vb: Public Shared Function CheckIfCollapseCreatesFlip(mesh As DMesh3, edgeID As Integer, newv As Vector3d) As Boolean
  overload: g3.MeshUtil.CheckIfCollapseCreatesFlip*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: g3.MeshUtil.CheckIfEdgeFlipCreatesFlip(g3.DMesh3,System.Int32,System.Double)
  commentId: M:g3.MeshUtil.CheckIfEdgeFlipCreatesFlip(g3.DMesh3,System.Int32,System.Double)
  id: CheckIfEdgeFlipCreatesFlip(g3.DMesh3,System.Int32,System.Double)
  parent: g3.MeshUtil
  langs:
  - csharp
  - vb
  name: CheckIfEdgeFlipCreatesFlip(DMesh3, Int32, Double)
  nameWithType: MeshUtil.CheckIfEdgeFlipCreatesFlip(DMesh3, Int32, Double)
  fullName: g3.MeshUtil.CheckIfEdgeFlipCreatesFlip(g3.DMesh3, System.Int32, System.Double)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/mesh/MeshUtil.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: CheckIfEdgeFlipCreatesFlip
    path: ../Assets/geometry3Sharp/mesh/MeshUtil.cs
    startLine: 138
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nif before a flip we have normals (n1,n2) and after we have (m1,m2), check if\nthe dot between any of the 4 pairs changes sign after the flip, or is\nless than the dot-product tolerance (ie angle tolerance)\n"
  example: []
  syntax:
    content: public static bool CheckIfEdgeFlipCreatesFlip(DMesh3 mesh, int eID, double flip_dot_tol = 0)
    parameters:
    - id: mesh
      type: g3.DMesh3
    - id: eID
      type: System.Int32
    - id: flip_dot_tol
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Shared Function CheckIfEdgeFlipCreatesFlip(mesh As DMesh3, eID As Integer, flip_dot_tol As Double = 0) As Boolean
  overload: g3.MeshUtil.CheckIfEdgeFlipCreatesFlip*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: g3.MeshUtil.GetEdgeFlipTris(g3.DMesh3,System.Int32,g3.Index3i@,g3.Index3i@,g3.Index3i@,g3.Index3i@)
  commentId: M:g3.MeshUtil.GetEdgeFlipTris(g3.DMesh3,System.Int32,g3.Index3i@,g3.Index3i@,g3.Index3i@,g3.Index3i@)
  id: GetEdgeFlipTris(g3.DMesh3,System.Int32,g3.Index3i@,g3.Index3i@,g3.Index3i@,g3.Index3i@)
  parent: g3.MeshUtil
  langs:
  - csharp
  - vb
  name: GetEdgeFlipTris(DMesh3, Int32, out Index3i, out Index3i, out Index3i, out Index3i)
  nameWithType: MeshUtil.GetEdgeFlipTris(DMesh3, Int32, out Index3i, out Index3i, out Index3i, out Index3i)
  fullName: g3.MeshUtil.GetEdgeFlipTris(g3.DMesh3, System.Int32, out g3.Index3i, out g3.Index3i, out g3.Index3i, out g3.Index3i)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/mesh/MeshUtil.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: GetEdgeFlipTris
    path: ../Assets/geometry3Sharp/mesh/MeshUtil.cs
    startLine: 174
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nFor given edge, return it&apos;s triangles and the triangles that would\nbe created if it was flipped (used in edge-flip optimizers)\n"
  example: []
  syntax:
    content: public static void GetEdgeFlipTris(DMesh3 mesh, int eID, out Index3i orig_t0, out Index3i orig_t1, out Index3i flip_t0, out Index3i flip_t1)
    parameters:
    - id: mesh
      type: g3.DMesh3
    - id: eID
      type: System.Int32
    - id: orig_t0
      type: g3.Index3i
    - id: orig_t1
      type: g3.Index3i
    - id: flip_t0
      type: g3.Index3i
    - id: flip_t1
      type: g3.Index3i
    content.vb: Public Shared Sub GetEdgeFlipTris(mesh As DMesh3, eID As Integer, ByRef orig_t0 As Index3i, ByRef orig_t1 As Index3i, ByRef flip_t0 As Index3i, ByRef flip_t1 As Index3i)
  overload: g3.MeshUtil.GetEdgeFlipTris*
  nameWithType.vb: MeshUtil.GetEdgeFlipTris(DMesh3, Int32, ByRef Index3i, ByRef Index3i, ByRef Index3i, ByRef Index3i)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: g3.MeshUtil.GetEdgeFlipTris(g3.DMesh3, System.Int32, ByRef g3.Index3i, ByRef g3.Index3i, ByRef g3.Index3i, ByRef g3.Index3i)
  name.vb: GetEdgeFlipTris(DMesh3, Int32, ByRef Index3i, ByRef Index3i, ByRef Index3i, ByRef Index3i)
- uid: g3.MeshUtil.GetEdgeFlipNormals(g3.DMesh3,System.Int32,g3.Vector3d@,g3.Vector3d@,g3.Vector3d@,g3.Vector3d@)
  commentId: M:g3.MeshUtil.GetEdgeFlipNormals(g3.DMesh3,System.Int32,g3.Vector3d@,g3.Vector3d@,g3.Vector3d@,g3.Vector3d@)
  id: GetEdgeFlipNormals(g3.DMesh3,System.Int32,g3.Vector3d@,g3.Vector3d@,g3.Vector3d@,g3.Vector3d@)
  parent: g3.MeshUtil
  langs:
  - csharp
  - vb
  name: GetEdgeFlipNormals(DMesh3, Int32, out Vector3d, out Vector3d, out Vector3d, out Vector3d)
  nameWithType: MeshUtil.GetEdgeFlipNormals(DMesh3, Int32, out Vector3d, out Vector3d, out Vector3d, out Vector3d)
  fullName: g3.MeshUtil.GetEdgeFlipNormals(g3.DMesh3, System.Int32, out g3.Vector3d, out g3.Vector3d, out g3.Vector3d, out g3.Vector3d)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/mesh/MeshUtil.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: GetEdgeFlipNormals
    path: ../Assets/geometry3Sharp/mesh/MeshUtil.cs
    startLine: 196
  assemblies:
  - geometry3Sharp
  namespace: g3
  summary: "\nFor given edge, return normals of it&apos;s two triangles, and normals\nof the triangles created if edge is flipped (used in edge-flip optimizers)\n"
  example: []
  syntax:
    content: public static void GetEdgeFlipNormals(DMesh3 mesh, int eID, out Vector3d n1, out Vector3d n2, out Vector3d on1, out Vector3d on2)
    parameters:
    - id: mesh
      type: g3.DMesh3
    - id: eID
      type: System.Int32
    - id: n1
      type: g3.Vector3d
    - id: n2
      type: g3.Vector3d
    - id: on1
      type: g3.Vector3d
    - id: on2
      type: g3.Vector3d
    content.vb: Public Shared Sub GetEdgeFlipNormals(mesh As DMesh3, eID As Integer, ByRef n1 As Vector3d, ByRef n2 As Vector3d, ByRef on1 As Vector3d, ByRef on2 As Vector3d)
  overload: g3.MeshUtil.GetEdgeFlipNormals*
  nameWithType.vb: MeshUtil.GetEdgeFlipNormals(DMesh3, Int32, ByRef Vector3d, ByRef Vector3d, ByRef Vector3d, ByRef Vector3d)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: g3.MeshUtil.GetEdgeFlipNormals(g3.DMesh3, System.Int32, ByRef g3.Vector3d, ByRef g3.Vector3d, ByRef g3.Vector3d, ByRef g3.Vector3d)
  name.vb: GetEdgeFlipNormals(DMesh3, Int32, ByRef Vector3d, ByRef Vector3d, ByRef Vector3d, ByRef Vector3d)
- uid: g3.MeshUtil.ExtractLoopV(g3.IMesh,System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:g3.MeshUtil.ExtractLoopV(g3.IMesh,System.Collections.Generic.IEnumerable{System.Int32})
  id: ExtractLoopV(g3.IMesh,System.Collections.Generic.IEnumerable{System.Int32})
  parent: g3.MeshUtil
  langs:
  - csharp
  - vb
  name: ExtractLoopV(IMesh, IEnumerable<Int32>)
  nameWithType: MeshUtil.ExtractLoopV(IMesh, IEnumerable<Int32>)
  fullName: g3.MeshUtil.ExtractLoopV(g3.IMesh, System.Collections.Generic.IEnumerable<System.Int32>)
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/mesh/MeshUtil.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: ExtractLoopV
    path: ../Assets/geometry3Sharp/mesh/MeshUtil.cs
    startLine: 218
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public static DCurve3 ExtractLoopV(IMesh mesh, IEnumerable<int> vertices)
    parameters:
    - id: mesh
      type: g3.IMesh
    - id: vertices
      type: System.Collections.Generic.IEnumerable{System.Int32}
    return:
      type: g3.DCurve3
    content.vb: Public Shared Function ExtractLoopV(mesh As IMesh, vertices As IEnumerable(Of Integer)) As DCurve3
  overload: g3.MeshUtil.ExtractLoopV*
  nameWithType.vb: MeshUtil.ExtractLoopV(IMesh, IEnumerable(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: g3.MeshUtil.ExtractLoopV(g3.IMesh, System.Collections.Generic.IEnumerable(Of System.Int32))
  name.vb: ExtractLoopV(IMesh, IEnumerable(Of Int32))
- uid: g3.MeshUtil.ExtractLoopV(g3.IMesh,System.Int32[])
  commentId: M:g3.MeshUtil.ExtractLoopV(g3.IMesh,System.Int32[])
  id: ExtractLoopV(g3.IMesh,System.Int32[])
  parent: g3.MeshUtil
  langs:
  - csharp
  - vb
  name: ExtractLoopV(IMesh, Int32[])
  nameWithType: MeshUtil.ExtractLoopV(IMesh, Int32[])
  fullName: g3.MeshUtil.ExtractLoopV(g3.IMesh, System.Int32[])
  type: Method
  source:
    remote:
      path: Assets/geometry3Sharp/mesh/MeshUtil.cs
      branch: gh-pages
      repo: https://github.com/runette/ViRGIS.git
    id: ExtractLoopV
    path: ../Assets/geometry3Sharp/mesh/MeshUtil.cs
    startLine: 225
  assemblies:
  - geometry3Sharp
  namespace: g3
  syntax:
    content: public static DCurve3 ExtractLoopV(IMesh mesh, int[] vertices)
    parameters:
    - id: mesh
      type: g3.IMesh
    - id: vertices
      type: System.Int32[]
    return:
      type: g3.DCurve3
    content.vb: Public Shared Function ExtractLoopV(mesh As IMesh, vertices As Integer()) As DCurve3
  overload: g3.MeshUtil.ExtractLoopV*
  nameWithType.vb: MeshUtil.ExtractLoopV(IMesh, Int32())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: g3.MeshUtil.ExtractLoopV(g3.IMesh, System.Int32())
  name.vb: ExtractLoopV(IMesh, Int32())
references:
- uid: g3
  commentId: N:g3
  name: g3
  nameWithType: g3
  fullName: g3
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: g3.MeshUtil.UniformSmooth*
  commentId: Overload:g3.MeshUtil.UniformSmooth
  name: UniformSmooth
  nameWithType: MeshUtil.UniformSmooth
  fullName: g3.MeshUtil.UniformSmooth
- uid: g3.DMesh3
  commentId: T:g3.DMesh3
  parent: g3
  name: DMesh3
  nameWithType: DMesh3
  fullName: g3.DMesh3
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: g3.Vector3d
  commentId: T:g3.Vector3d
  parent: g3
  name: Vector3d
  nameWithType: Vector3d
  fullName: g3.Vector3d
- uid: g3.MeshUtil.MeanValueSmooth*
  commentId: Overload:g3.MeshUtil.MeanValueSmooth
  name: MeanValueSmooth
  nameWithType: MeshUtil.MeanValueSmooth
  fullName: g3.MeshUtil.MeanValueSmooth
- uid: g3.MeshUtil.CotanSmooth*
  commentId: Overload:g3.MeshUtil.CotanSmooth
  name: CotanSmooth
  nameWithType: MeshUtil.CotanSmooth
  fullName: g3.MeshUtil.CotanSmooth
- uid: g3.MeshUtil.ScaleMesh*
  commentId: Overload:g3.MeshUtil.ScaleMesh
  name: ScaleMesh
  nameWithType: MeshUtil.ScaleMesh
  fullName: g3.MeshUtil.ScaleMesh
- uid: g3.Frame3f
  commentId: T:g3.Frame3f
  parent: g3
  name: Frame3f
  nameWithType: Frame3f
  fullName: g3.Frame3f
- uid: g3.Vector3f
  commentId: T:g3.Vector3f
  parent: g3
  name: Vector3f
  nameWithType: Vector3f
  fullName: g3.Vector3f
- uid: g3.MeshUtil.OpeningAngleD*
  commentId: Overload:g3.MeshUtil.OpeningAngleD
  name: OpeningAngleD
  nameWithType: MeshUtil.OpeningAngleD
  fullName: g3.MeshUtil.OpeningAngleD
- uid: g3.MeshUtil.DiscreteGaussCurvature*
  commentId: Overload:g3.MeshUtil.DiscreteGaussCurvature
  name: DiscreteGaussCurvature
  nameWithType: MeshUtil.DiscreteGaussCurvature
  fullName: g3.MeshUtil.DiscreteGaussCurvature
- uid: g3.MeshUtil.CheckIfCollapseCreatesFlip*
  commentId: Overload:g3.MeshUtil.CheckIfCollapseCreatesFlip
  name: CheckIfCollapseCreatesFlip
  nameWithType: MeshUtil.CheckIfCollapseCreatesFlip
  fullName: g3.MeshUtil.CheckIfCollapseCreatesFlip
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: g3.MeshUtil.CheckIfEdgeFlipCreatesFlip*
  commentId: Overload:g3.MeshUtil.CheckIfEdgeFlipCreatesFlip
  name: CheckIfEdgeFlipCreatesFlip
  nameWithType: MeshUtil.CheckIfEdgeFlipCreatesFlip
  fullName: g3.MeshUtil.CheckIfEdgeFlipCreatesFlip
- uid: g3.MeshUtil.GetEdgeFlipTris*
  commentId: Overload:g3.MeshUtil.GetEdgeFlipTris
  name: GetEdgeFlipTris
  nameWithType: MeshUtil.GetEdgeFlipTris
  fullName: g3.MeshUtil.GetEdgeFlipTris
- uid: g3.Index3i
  commentId: T:g3.Index3i
  parent: g3
  name: Index3i
  nameWithType: Index3i
  fullName: g3.Index3i
- uid: g3.MeshUtil.GetEdgeFlipNormals*
  commentId: Overload:g3.MeshUtil.GetEdgeFlipNormals
  name: GetEdgeFlipNormals
  nameWithType: MeshUtil.GetEdgeFlipNormals
  fullName: g3.MeshUtil.GetEdgeFlipNormals
- uid: g3.MeshUtil.ExtractLoopV*
  commentId: Overload:g3.MeshUtil.ExtractLoopV
  name: ExtractLoopV
  nameWithType: MeshUtil.ExtractLoopV
  fullName: g3.MeshUtil.ExtractLoopV
- uid: g3.IMesh
  commentId: T:g3.IMesh
  parent: g3
  name: IMesh
  nameWithType: IMesh
  fullName: g3.IMesh
- uid: System.Collections.Generic.IEnumerable{System.Int32}
  commentId: T:System.Collections.Generic.IEnumerable{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Int32>
  nameWithType: IEnumerable<Int32>
  fullName: System.Collections.Generic.IEnumerable<System.Int32>
  nameWithType.vb: IEnumerable(Of Int32)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Int32)
  name.vb: IEnumerable(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: g3.DCurve3
  commentId: T:g3.DCurve3
  parent: g3
  name: DCurve3
  nameWithType: DCurve3
  fullName: g3.DCurve3
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
